#!/usr/bin/env python3
"""
Install Advanced Dependencies for ForexBot AI
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö AI –º–æ–¥–µ–ª–µ–π
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command: str, description: str) -> bool:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîÑ {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description.lower()}: {e}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def create_virtual_environment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    venv_path = Path("venv")
    if venv_path.exists():
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    return run_command("python3 -m venv venv", "–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

def activate_venv_and_install():
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è venv –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
    if os.name == 'nt':  # Windows
        activate_cmd = "venv\\Scripts\\activate"
        pip_cmd = "venv\\Scripts\\pip"
    else:  # Linux/Mac
        activate_cmd = "source venv/bin/activate"
        pip_cmd = "venv/bin/pip"
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
    if not run_command(f"{pip_cmd} install --upgrade pip", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"):
        return False
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è FastAPI –∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    basic_deps = [
        "fastapi",
        "uvicorn[standard]",
        "loguru",
        "pandas",
        "numpy",
        "requests",
        "websockets"
    ]
    
    for dep in basic_deps:
        if not run_command(f"{pip_cmd} install {dep}", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}"):
            return False
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    ml_deps = [
        "scikit-learn",
        "xgboost",
        "lightgbm",
        "joblib"
    ]
    
    for dep in ml_deps:
        if not run_command(f"{pip_cmd} install {dep}", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}"):
            return False
    
    # TensorFlow –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    if not run_command(f"{pip_cmd} install tensorflow", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ TensorFlow"):
        return False
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    analytics_deps = [
        "matplotlib",
        "seaborn",
        "plotly"
    ]
    
    for dep in analytics_deps:
        if not run_command(f"{pip_cmd} install {dep}", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}"):
            return False
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    security_deps = [
        "pyjwt",
        "bcrypt",
        "python-multipart"
    ]
    
    for dep in security_deps:
        if not run_command(f"{pip_cmd} install {dep}", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}"):
            return False
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_deps = [
        "sqlalchemy",
        "alembic"
    ]
    
    for dep in db_deps:
        if not run_command(f"{pip_cmd} install {dep}", f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}"):
            return False
    
    return True

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        "data/logs",
        "data/models",
        "web_interface/frontend",
        "models",
        "backtests",
        "reports"
    ]
    
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def create_config_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    config = {
        "initial_capital": 10000,
        "max_risk_per_trade": 0.02,
        "max_positions": 5,
        "confidence_threshold": 0.6,
        "enable_ai_trading": True,
        "enable_risk_management": True,
        "ai_models": {
            "lstm": {
                "enabled": True,
                "sequence_length": 60,
                "n_features": 30
            },
            "transformer": {
                "enabled": True,
                "sequence_length": 60,
                "n_features": 30,
                "n_heads": 8
            },
            "xgboost": {
                "enabled": True,
                "n_estimators": 1000,
                "max_depth": 6,
                "learning_rate": 0.01
            },
            "lightgbm": {
                "enabled": True,
                "n_estimators": 1000,
                "max_depth": 6,
                "learning_rate": 0.01
            },
            "random_forest": {
                "enabled": True,
                "n_estimators": 500,
                "max_depth": 10
            },
            "gradient_boosting": {
                "enabled": True,
                "n_estimators": 500,
                "max_depth": 6
            }
        },
        "backtesting": {
            "initial_capital": 10000,
            "commission": 0.001,
            "confidence_threshold": 0.6
        },
        "notifications": {
            "email": {
                "enabled": False,
                "smtp_server": "smtp.gmail.com",
                "smtp_port": 587,
                "username": "",
                "password": "",
                "recipient": []
            },
            "telegram": {
                "enabled": False,
                "bot_token": "",
                "chat_id": ""
            }
        },
        "database": {
            "enabled": True,
            "url": "sqlite:///forexbot.db"
        },
        "security": {
            "enabled": True,
            "jwt_secret": "",
            "password_hash_rounds": 12
        }
    }
    
    import json
    with open("config.json", "w") as f:
        json.dump(config, f, indent=2)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: config.json")

def create_startup_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞"""
    if os.name == 'nt':  # Windows
        script_content = """@echo off
echo Starting Advanced ForexBot AI...
call venv\\Scripts\\activate
python integrated_bot_advanced.py
pause
"""
        with open("start_advanced_bot.bat", "w") as f:
            f.write(script_content)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞: start_advanced_bot.bat")
    else:  # Linux/Mac
        script_content = """#!/bin/bash
echo "Starting Advanced ForexBot AI..."
source venv/bin/activate
python integrated_bot_advanced.py
"""
        with open("start_advanced_bot.sh", "w") as f:
            f.write(script_content)
        os.chmod("start_advanced_bot.sh", 0o755)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞: start_advanced_bot.sh")

def test_installation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    test_script = """
import sys
import pandas as pd
import numpy as np
import tensorflow as tf
import xgboost as xgb
import lightgbm as lgb
from sklearn.ensemble import RandomForestClassifier
from fastapi import FastAPI
from loguru import logger

print("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
print(f"Pandas –≤–µ—Ä—Å–∏—è: {pd.__version__}")
print(f"TensorFlow –≤–µ—Ä—Å–∏—è: {tf.__version__}")
print(f"XGBoost –≤–µ—Ä—Å–∏—è: {xgb.__version__}")
"""
    
    try:
        if os.name == 'nt':
            result = subprocess.run("venv\\Scripts\\python -c \"" + test_script.replace('\n', '; ') + "\"", 
                                 shell=True, check=True, capture_output=True, text=True)
        else:
            result = subprocess.run("venv/bin/python -c \"" + test_script.replace('\n', '; ') + "\"", 
                                 shell=True, check=True, capture_output=True, text=True)
        
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Advanced ForexBot AI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
    if not check_python_version():
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not create_virtual_environment():
        return False
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not activate_venv_and_install():
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    create_directories()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    create_config_file()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
    create_startup_script()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not test_installation():
        return False
    
    print("\n" + "=" * 50)
    print("üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    if os.name == 'nt':
        print("   venv\\Scripts\\activate")
    else:
        print("   source venv/bin/activate")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:")
    if os.name == 'nt':
        print("   python integrated_bot_advanced.py")
    else:
        print("   python integrated_bot_advanced.py")
    print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000")
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("- API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
    print("- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config.json")
    print("- –õ–æ–≥–∏: data/logs/")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    else:
        print("\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")