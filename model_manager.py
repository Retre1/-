#!/usr/bin/env python3
"""
Model Manager for ForexBot AI
–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from pathlib import Path
import schedule
import threading
import time

from training_pipeline import ModelTrainingPipeline
from advanced_ai_models import create_advanced_models
from cache_system import CacheManager, PredictionCache

logger = logging.getLogger(__name__)

class ModelManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.training_pipeline = ModelTrainingPipeline(config)
        self.cache_manager = CacheManager()
        self.prediction_cache = PredictionCache(self.cache_manager)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        self.models_status = {}
        self.training_schedule = {}
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        self.auto_training_enabled = config.get('ai', {}).get('auto_training', True)
        self.retrain_interval = config.get('ai', {}).get('retrain_interval', 24)  # —á–∞—Å—ã
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ç–æ—á–Ω–æ—Å—Ç–∏
        self.min_accuracy_threshold = config.get('ai', {}).get('min_accuracy_threshold', 0.65)
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if self.auto_training_enabled:
            self._start_scheduler()
    
    def _start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        def run_scheduler():
            while True:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule.every(self.retrain_interval).hours.do(self._auto_retrain_all_models)
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
        scheduler_thread.start()
        
        logger.info(f"üïê –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.retrain_interval} —á–∞—Å–æ–≤)")
    
    def initialize_models(self, symbols: List[str], timeframes: List[str]) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        
        Args:
            symbols: –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            timeframes: –°–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤ –∏ {len(timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
        
        success_count = 0
        total_count = len(symbols) * len(timeframes)
        
        for symbol in symbols:
            for timeframe in timeframes:
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π
                    if self.training_pipeline.load_models(symbol, timeframe):
                        self.models_status[f"{symbol}_{timeframe}"] = {
                            'status': 'loaded',
                            'last_loaded': datetime.now().isoformat(),
                            'accuracy': self._get_model_accuracy(symbol, timeframe)
                        }
                        success_count += 1
                        logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {symbol} {timeframe}")
                    else:
                        # –ï—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –æ–±—É—á–∞–µ–º –Ω–æ–≤—ã–µ
                        logger.info(f"üìö –û–±—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol} {timeframe}")
                        if self._train_models_for_symbol(symbol, timeframe):
                            success_count += 1
                            logger.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –¥–ª—è {symbol} {timeframe}")
                        else:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol} {timeframe}")
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol} {timeframe}: {e}")
        
        success_rate = success_count / total_count * 100
        logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{total_count} ({success_rate:.1f}%)")
        
        return success_rate > 80  # –£—Å–ø–µ—Ö –µ—Å–ª–∏ –±–æ–ª–µ–µ 80% –º–æ–¥–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    
    def _train_models_for_symbol(self, symbol: str, timeframe: str) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 365 –¥–Ω–µ–π)
            end_date = datetime.now()
            start_date = end_date - timedelta(days=365)
            
            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            results = self.training_pipeline.train_models(
                symbol=symbol,
                timeframe=timeframe,
                start_date=start_date.strftime('%Y-%m-%d'),
                end_date=end_date.strftime('%Y-%m-%d')
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π
            validation_results = results.get('validation_results', {})
            avg_accuracy = 0
            valid_models = 0
            
            for model_name, result in validation_results.items():
                if 'accuracy' in result:
                    avg_accuracy += result['accuracy']
                    valid_models += 1
            
            if valid_models > 0:
                avg_accuracy /= valid_models
                
                if avg_accuracy >= self.min_accuracy_threshold:
                    self.models_status[f"{symbol}_{timeframe}"] = {
                        'status': 'trained',
                        'last_trained': datetime.now().isoformat(),
                        'accuracy': avg_accuracy,
                        'backtest_results': results.get('backtest_results', {})
                    }
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol} {timeframe}: {avg_accuracy:.4f}")
                    return False
            else:
                logger.error(f"‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol} {timeframe}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol} {timeframe}: {e}")
            return False
    
    def _get_model_accuracy(self, symbol: str, timeframe: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            model_info = self.training_pipeline.get_model_info(symbol, timeframe)
            accuracies = []
            
            for model_name, info in model_info.items():
                if 'training_metrics' in info and 'accuracy' in info['training_metrics']:
                    accuracies.append(info['training_metrics']['accuracy'])
            
            return sum(accuracies) / len(accuracies) if accuracies else 0.0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return 0.0
    
    def get_prediction(self, symbol: str, timeframe: str, market_data: pd.DataFrame) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            timeframe: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            market_data: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π
            model_key = f"{symbol}_{timeframe}"
            if model_key not in self.models_status:
                logger.error(f"‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {symbol} {timeframe}")
                return {'error': 'Models not initialized'}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cache_key = f"{symbol}_{timeframe}_{datetime.now().strftime('%Y%m%d_%H')}"
            cached_prediction = self.prediction_cache.get_cached_prediction(symbol, timeframe, 100)
            
            if cached_prediction:
                logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {symbol} {timeframe}")
                return cached_prediction
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç –∞–Ω—Å–∞–º–±–ª—è
            ensemble_predictions = self.training_pipeline.ensemble_model.predict_ensemble(market_data)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
            self.prediction_cache.set_cached_prediction(symbol, timeframe, 100, ensemble_predictions)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self._update_prediction_stats(symbol, timeframe, ensemble_predictions)
            
            return ensemble_predictions
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {symbol} {timeframe}: {e}")
            return {'error': str(e)}
    
    def _update_prediction_stats(self, symbol: str, timeframe: str, prediction: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        model_key = f"{symbol}_{timeframe}"
        
        if model_key in self.models_status:
            if 'prediction_count' not in self.models_status[model_key]:
                self.models_status[model_key]['prediction_count'] = 0
                self.models_status[model_key]['last_prediction'] = None
            
            self.models_status[model_key]['prediction_count'] += 1
            self.models_status[model_key]['last_prediction'] = datetime.now().isoformat()
    
    def retrain_models(self, symbol: str, timeframe: str, force: bool = False) -> Dict:
        """
        –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            timeframe: –í—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        """
        try:
            logger.info(f"üîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol} {timeframe}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
            if not force:
                model_key = f"{symbol}_{timeframe}"
                if model_key in self.models_status:
                    last_trained = datetime.fromisoformat(self.models_status[model_key].get('last_trained', '2020-01-01'))
                    hours_since_training = (datetime.now() - last_trained).total_seconds() / 3600
                    
                    if hours_since_training < self.retrain_interval:
                        logger.info(f"‚è∞ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è {symbol} {timeframe} (–ø—Ä–æ—à–ª–æ {hours_since_training:.1f} —á–∞—Å–æ–≤)")
                        return {'status': 'not_required', 'hours_since_training': hours_since_training}
            
            # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            results = self.training_pipeline.retrain_models(symbol, timeframe)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            model_key = f"{symbol}_{timeframe}"
            self.models_status[model_key] = {
                'status': 'retrained',
                'last_trained': datetime.now().isoformat(),
                'accuracy': self._get_model_accuracy(symbol, timeframe),
                'backtest_results': results.get('backtest_results', {})
            }
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            self.prediction_cache.clear_old_predictions(symbol)
            
            logger.info(f"‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {symbol} {timeframe}")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol} {timeframe}: {e}")
            return {'error': str(e)}
    
    def _auto_retrain_all_models(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")
        
        symbols = self.config.get('mt5', {}).get('symbols', ['EURUSD'])
        timeframes = self.config.get('ai', {}).get('timeframes', ['H1'])
        
        for symbol in symbols:
            for timeframe in timeframes:
                try:
                    self.retrain_models(symbol, timeframe, force=False)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è {symbol} {timeframe}: {e}")
    
    def get_models_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        return {
            'models_status': self.models_status,
            'auto_training_enabled': self.auto_training_enabled,
            'retrain_interval': self.retrain_interval,
            'min_accuracy_threshold': self.min_accuracy_threshold,
            'total_models': len(self.models_status),
            'loaded_models': len([m for m in self.models_status.values() if m['status'] == 'loaded']),
            'trained_models': len([m for m in self.models_status.values() if m['status'] == 'trained']),
            'retrained_models': len([m for m in self.models_status.values() if m['status'] == 'retrained'])
        }
    
    def get_model_performance(self, symbol: str, timeframe: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            model_info = self.training_pipeline.get_model_info(symbol, timeframe)
            
            performance = {
                'symbol': symbol,
                'timeframe': timeframe,
                'models': {},
                'overall_accuracy': 0.0,
                'backtest_results': {}
            }
            
            accuracies = []
            
            for model_name, info in model_info.items():
                model_perf = {
                    'training_date': info.get('training_date', 'N/A'),
                    'file_size': info.get('file_size', 0),
                    'accuracy': info.get('training_metrics', {}).get('accuracy', 0.0)
                }
                
                performance['models'][model_name] = model_perf
                accuracies.append(model_perf['accuracy'])
            
            if accuracies:
                performance['overall_accuracy'] = sum(accuracies) / len(accuracies)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ backtesting
            model_key = f"{symbol}_{timeframe}"
            if model_key in self.models_status:
                performance['backtest_results'] = self.models_status[model_key].get('backtest_results', {})
            
            return performance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π: {e}")
            return {'error': str(e)}
    
    def cleanup_old_models(self, days_to_keep: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π (—Å—Ç–∞—Ä—à–µ {days_to_keep} –¥–Ω–µ–π)")
            
            models_dir = Path("data/models")
            cutoff_date = datetime.now() - timedelta(days=days_to_keep)
            
            deleted_count = 0
            
            for model_file in models_dir.rglob("*.joblib"):
                if model_file.stat().st_mtime < cutoff_date.timestamp():
                    try:
                        model_file.unlink()
                        deleted_count += 1
                        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏: {model_file}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {model_file}: {e}")
            
            logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π: {e}")

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI
def create_model_endpoints(app, model_manager: ModelManager):
    """–°–æ–∑–¥–∞–Ω–∏–µ API endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏"""
    
    @app.post("/api/models/train")
    async def train_models_endpoint(request: Dict):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        symbol = request.get('symbol', 'EURUSD')
        timeframe = request.get('timeframe', 'H1')
        force = request.get('force', False)
        
        results = model_manager.retrain_models(symbol, timeframe, force)
        return results
    
    @app.get("/api/models/status")
    async def get_models_status():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–µ–π"""
        return model_manager.get_models_status()
    
    @app.get("/api/models/performance/{symbol}/{timeframe}")
    async def get_model_performance(symbol: str, timeframe: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
        return model_manager.get_model_performance(symbol, timeframe)
    
    @app.post("/api/models/initialize")
    async def initialize_models_endpoint():
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
        symbols = ["EURUSD", "GBPUSD", "USDJPY"]
        timeframes = ["M15", "H1", "H4"]
        
        success = model_manager.initialize_models(symbols, timeframes)
        return {"success": success, "message": "Models initialized" if success else "Initialization failed"}
    
    @app.post("/api/models/cleanup")
    async def cleanup_models_endpoint(request: Dict):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        days_to_keep = request.get('days_to_keep', 30)
        model_manager.cleanup_old_models(days_to_keep)
        return {"message": f"Cleanup completed, keeping models from last {days_to_keep} days"}

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "mt5": {
            "symbols": ["EURUSD", "GBPUSD", "USDJPY"]
        },
        "ai": {
            "models": ["lstm", "xgboost", "lightgbm"],
            "timeframes": ["M15", "H1", "H4"],
            "auto_training": True,
            "retrain_interval": 24,
            "min_accuracy_threshold": 0.65
        }
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π
    model_manager = ModelManager(config)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π...")
    success = model_manager.initialize_models(
        symbols=["EURUSD", "GBPUSD"],
        timeframes=["H1", "H4"]
    )
    
    if success:
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = model_manager.get_models_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π: {status['total_models']} –º–æ–¥–µ–ª–µ–π")
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {status['loaded_models']}")
        print(f"   –û–±—É—á–µ–Ω–æ: {status['trained_models']}")
        print(f"   –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–æ: {status['retrained_models']}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance = model_manager.get_model_performance("EURUSD", "H1")
        print(f"üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å EURUSD H1:")
        print(f"   –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {performance.get('overall_accuracy', 0):.4f}")
        
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π")