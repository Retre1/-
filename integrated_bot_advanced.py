#!/usr/bin/env python3
"""
Advanced Integrated ForexBot with Professional AI Models
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ForexBot —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ AI –º–æ–¥–µ–ª—è–º–∏
"""

import asyncio
import json
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
import uvicorn
from loguru import logger
import pandas as pd
import numpy as np

# –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö AI –º–æ–¥–µ–ª–µ–π
from advanced_ai_models import AdvancedEnsembleModel, create_advanced_models
from advanced_backtesting import AdvancedBacktester, ModelOptimizer, PerformanceAnalyzer

# –ò–º–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π
from model_manager import ModelManager, create_model_endpoints

# Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è API
class TradeSignal(BaseModel):
    symbol: str
    direction: str  # BUY, SELL, HOLD
    confidence: float
    price: float
    timestamp: datetime
    model: str
    strategy: str

class TradingConfig(BaseModel):
    initial_capital: float = 10000
    max_risk_per_trade: float = 0.02  # 2% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
    max_positions: int = 5
    confidence_threshold: float = 0.6
    enable_ai_trading: bool = True
    enable_risk_management: bool = True

class BotStatus(BaseModel):
    status: str
    uptime: str
    total_trades: int
    profitable_trades: int
    total_profit: float
    current_drawdown: float
    ai_models_loaded: bool
    last_signal: Optional[TradeSignal] = None

class IntegratedForexBotAdvanced:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å AI"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.app = FastAPI(title="ForexBot AI Advanced", version="2.0.0")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.ensemble_model = create_advanced_models()
        self.backtester = AdvancedBacktester()
        self.performance_analyzer = PerformanceAnalyzer()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        self.model_manager = ModelManager(config)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.status = "stopped"
        self.start_time = None
        self.capital = 10000
        self.trades = []
        self.positions = {}
        self.stats = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API endpoints
        self._setup_endpoints()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self._initialize_models()
    
    def _initialize_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π"""
        try:
            symbols = self.config.get('mt5', {}).get('symbols', ['EURUSD'])
            timeframes = self.config.get('ai', {}).get('timeframes', ['H1'])
            
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π...")
            success = self.model_manager.initialize_models(symbols, timeframes)
            
            if success:
                logger.info("‚úÖ AI –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    def _setup_endpoints(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API endpoints"""
        
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints...
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ endpoints –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏
        create_model_endpoints(self.app, self.model_manager)
        
        # –ù–æ–≤—ã–µ endpoints –¥–ª—è AI –º–æ–¥–µ–ª–µ–π
        @app.get("/api/ai/models")
        async def get_ai_models():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ AI –º–æ–¥–µ–ª—è—Ö"""
            return {
                "available_models": list(self.ensemble_model.models.keys()),
                "model_status": self.model_manager.get_models_status(),
                "feature_engineer": {
                    "feature_count": len(self.ensemble_model.feature_engineer.feature_names),
                    "feature_names": self.ensemble_model.feature_engineer.feature_names[:10]  # –ü–µ—Ä–≤—ã–µ 10
                }
            }
        
        @app.post("/api/ai/predict")
        async def get_ai_prediction(request: Dict):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç AI –º–æ–¥–µ–ª–µ–π"""
            symbol = request.get('symbol', 'EURUSD')
            timeframe = request.get('timeframe', 'H1')
            market_data = request.get('market_data', {})
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
            df = pd.DataFrame(market_data)
            
            if df.empty:
                return {"error": "No market data provided"}
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            prediction = self.model_manager.get_prediction(symbol, timeframe, df)
            return prediction
        
        @app.post("/api/ai/retrain")
        async def retrain_ai_models(request: Dict):
            """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π"""
            symbol = request.get('symbol', 'EURUSD')
            timeframe = request.get('timeframe', 'H1')
            force = request.get('force', False)
            
            results = self.model_manager.retrain_models(symbol, timeframe, force)
            return results
        
        @app.get("/api/ai/performance/{symbol}/{timeframe}")
        async def get_ai_performance(symbol: str, timeframe: str):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ AI –º–æ–¥–µ–ª–µ–π"""
            return self.model_manager.get_model_performance(symbol, timeframe)
        
        @app.post("/api/ai/backtest")
        async def run_ai_backtest(request: Dict):
            """–ó–∞–ø—É—Å–∫ backtesting –¥–ª—è AI –º–æ–¥–µ–ª–µ–π"""
            symbol = request.get('symbol', 'EURUSD')
            timeframe = request.get('timeframe', 'H1')
            start_date = request.get('start_date', '2023-01-01')
            end_date = request.get('end_date', '2023-12-31')
            
            try:
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                df, features, target, feature_names = self.model_manager.training_pipeline.prepare_training_data(
                    symbol, timeframe, start_date, end_date
                )
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                predictions = self.ensemble_model.predict_ensemble(df)
                pred_array = predictions['ensemble_prediction']
                
                # –ó–∞–ø—É—Å–∫ backtesting
                results = self.backtester.run_backtest(df, pred_array)
                
                return {
                    "symbol": symbol,
                    "timeframe": timeframe,
                    "period": f"{start_date} - {end_date}",
                    "backtest_results": results,
                    "data_info": {
                        "total_records": len(df),
                        "features_count": len(feature_names),
                        "predictions_shape": pred_array.shape
                    }
                }
                
            except Exception as e:
                return {"error": str(e)}
        
        @app.get("/api/ai/features")
        async def get_ai_features():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö"""
            return {
                "feature_names": self.ensemble_model.feature_engineer.feature_names,
                "feature_count": len(self.ensemble_model.feature_engineer.feature_names),
                "technical_indicators": [
                    "sma_20", "sma_50", "sma_200", "ema_12", "ema_26",
                    "macd", "rsi", "bb_upper", "bb_lower", "stoch_k",
                    "atr", "volume_sma", "price_momentum", "volatility"
                ],
                "advanced_features": [
                    "fractal_high", "fractal_low", "higher_high", "lower_low",
                    "price_rsi_divergence", "mtf_trend", "market_regime",
                    "volatility_regime", "support", "resistance"
                ]
            }

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = "data/logs"
        os.makedirs(log_dir, exist_ok=True)
        
        logger.add(
            f"{log_dir}/bot_{datetime.now().strftime('%Y%m%d')}.log",
            rotation="1 day",
            retention="30 days",
            level="INFO"
        )
        
    async def initialize_ai_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö AI –º–æ–¥–µ–ª–µ–π...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è –º–æ–¥–µ–ª–µ–π
            self.ensemble_model = create_advanced_models()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            models_dir = "models"
            if os.path.exists(models_dir):
                logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
                self.ensemble_model.load_models(models_dir)
                self.ai_models_loaded = True
            else:
                logger.warning("–ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ.")
                
            logger.info("AI –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –º–æ–¥–µ–ª–µ–π: {e}")
            self.ai_models_loaded = False
            
    async def load_market_data(self, symbol: str = "EURUSD", timeframe: str = "1H", 
                             days: int = 365) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5 –∏–ª–∏ –¥—Ä—É–≥–æ–º—É –∏—Å—Ç–æ—á–Ω–∏–∫—É –¥–∞–Ω–Ω—ã—Ö
            # –î–ª—è –¥–µ–º–æ —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            dates = pd.date_range(
                end=datetime.now(),
                periods=days * 24,  # –ß–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                freq='1H'
            )
            
            np.random.seed(42)
            base_price = 1.0850  # EURUSD
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ü–µ–Ω
            returns = np.random.normal(0, 0.0005, len(dates))  # 0.05% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            prices = base_price * np.exp(np.cumsum(returns))
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
            trend = np.linspace(0, 0.01, len(dates))  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
            seasonal = 0.001 * np.sin(2 * np.pi * np.arange(len(dates)) / 24)  # –î–Ω–µ–≤–Ω–∞—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
            
            prices += trend + seasonal
            
            # –°–æ–∑–¥–∞–Ω–∏–µ OHLCV –¥–∞–Ω–Ω—ã—Ö
            df = pd.DataFrame({
                'open': prices * (1 + np.random.normal(0, 0.0001, len(dates))),
                'high': prices * (1 + abs(np.random.normal(0, 0.0002, len(dates)))),
                'low': prices * (1 - abs(np.random.normal(0, 0.0002, len(dates)))),
                'close': prices,
                'volume': np.random.randint(1000, 10000, len(dates))
            }, index=dates)
            
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö")
            return df
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
            
    async def generate_ai_signals(self, df: pd.DataFrame) -> List[TradeSignal]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if not self.ai_models_loaded or self.ensemble_model is None:
            logger.warning("AI –º–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
            return []
            
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –æ—Ç –∞–Ω—Å–∞–º–±–ª—è
            predictions = self.ensemble_model.predict_ensemble(df)
            ensemble_pred = predictions['ensemble']
            
            signals = []
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            for i in range(min(10, len(ensemble_pred))):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                pred = ensemble_pred[-(i+1)]
                max_prob = np.max(pred)
                max_class = np.argmax(pred)
                
                if max_prob >= self.trading_config.confidence_threshold:
                    direction = "HOLD"
                    if max_class == 1:
                        direction = "BUY"
                    elif max_class == 2:
                        direction = "SELL"
                        
                    if direction != "HOLD":
                        signal = TradeSignal(
                            symbol="EURUSD",
                            direction=direction,
                            confidence=max_prob,
                            price=df['close'].iloc[-(i+1)],
                            timestamp=df.index[-(i+1)],
                            model="ensemble",
                            strategy="ai_ensemble"
                        )
                        signals.append(signal)
                        
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} AI —Å–∏–≥–Ω–∞–ª–æ–≤")
            return signals
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return []
            
    async def execute_trade(self, signal: TradeSignal) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        try:
            if not self.trading_config.enable_ai_trading:
                logger.info("AI —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞
            if self.trading_config.enable_risk_management:
                if not self._check_risk_limits(signal):
                    logger.warning("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞")
                    return False
                    
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏
            if signal.direction == "BUY":
                success = await self._open_long_position(signal)
            elif signal.direction == "SELL":
                success = await self._close_long_position(signal)
            else:
                return False
                
            if success:
                self._update_statistics(signal)
                logger.info(f"–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {signal.direction} {signal.symbol} –ø–æ —Ü–µ–Ω–µ {signal.price}")
                
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return False
            
    def _check_risk_limits(self, signal: TradeSignal) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —Ä–∏—Å–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
        if len(self.positions) >= self.trading_config.max_positions:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        position_value = self.capital * self.trading_config.max_risk_per_trade
        if position_value > self.capital * 0.1:  # –ú–∞–∫—Å–∏–º—É–º 10% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
            return False
            
        return True
        
    async def _open_long_position(self, signal: TradeSignal) -> bool:
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            position_size = self.capital * self.trading_config.max_risk_per_trade / signal.price
            cost = position_size * signal.price
            
            if cost <= self.capital:
                self.positions[signal.symbol] = {
                    'type': 'LONG',
                    'size': position_size,
                    'entry_price': signal.price,
                    'entry_time': signal.timestamp,
                    'signal': signal
                }
                self.capital -= cost
                return True
                
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
            
    async def _close_long_position(self, signal: TradeSignal) -> bool:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if signal.symbol in self.positions:
                position = self.positions[signal.symbol]
                if position['type'] == 'LONG':
                    revenue = position['size'] * signal.price
                    profit = revenue - (position['size'] * position['entry_price'])
                    
                    self.trades.append({
                        'entry_time': position['entry_time'],
                        'exit_time': signal.timestamp,
                        'entry_price': position['entry_price'],
                        'exit_price': signal.price,
                        'size': position['size'],
                        'profit': profit,
                        'signal': signal
                    })
                    
                    self.capital += revenue
                    del self.positions[signal.symbol]
                    return True
                    
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return False
            
    def _update_statistics(self, signal: TradeSignal):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats["total_trades"] += 1
        
        if signal.direction == "SELL" and self.trades:
            last_trade = self.trades[-1]
            if last_trade['profit'] > 0:
                self.stats["profitable_trades"] += 1
                
        self.stats["total_profit"] = sum(t['profit'] for t in self.trades)
        self.stats["win_rate"] = self.stats["profitable_trades"] / self.stats["total_trades"] if self.stats["total_trades"] > 0 else 0
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
            
            self.status = "starting"
            self.start_time = datetime.now()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π
            await self.initialize_ai_models()
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            market_data = await self.load_market_data()
            
            if market_data.empty:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return False
                
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI —Å–∏–≥–Ω–∞–ª–æ–≤
            signals = await self.generate_ai_signals(market_data)
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            for signal in signals:
                await self.execute_trade(signal)
                
            self.status = "running"
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            self.status = "error"
            return False
            
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        self.status = "stopped"
        
    def get_status(self) -> BotStatus:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        uptime = "N/A"
        if self.start_time:
            uptime = str(datetime.now() - self.start_time)
            
        last_signal = None
        if self.trades:
            last_signal = self.trades[-1].get('signal')
            
        return BotStatus(
            status=self.status,
            uptime=uptime,
            total_trades=self.stats["total_trades"],
            profitable_trades=self.stats["profitable_trades"],
            total_profit=self.stats["total_profit"],
            current_drawdown=self.stats["max_drawdown"],
            ai_models_loaded=self.ai_models_loaded,
            last_signal=last_signal
        )
        
    def get_trades(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        return self.trades
        
    def get_positions(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return self.positions
        
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return self.stats

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Advanced ForexBot AI", version="2.0.0")

# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="web_interface/frontend"), name="static")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = None

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global bot
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = {}
    if os.path.exists("config.json"):
        with open("config.json", "r") as f:
            config = json.load(f)
    else:
        config = {
            "initial_capital": 10000,
            "max_risk_per_trade": 0.02,
            "max_positions": 5,
            "confidence_threshold": 0.6,
            "enable_ai_trading": True,
            "enable_risk_management": True
        }
        
    bot = IntegratedForexBotAdvanced(config)

@app.get("/")
async def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        with open("web_interface/frontend/index.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read())
    except FileNotFoundError:
        return {
            "message": "Advanced ForexBot AI Trading System",
            "version": "2.0.0",
            "status": "running",
            "note": "–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }

@app.get("/api/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
    if bot:
        return bot.get_status()
    return {"status": "not_initialized"}

@app.post("/api/start")
async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if bot:
        success = await bot.start()
        return {"success": success, "message": "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω" if success else "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞"}
    return {"success": False, "message": "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

@app.post("/api/stop")
async def stop_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
    if bot:
        await bot.stop()
        return {"success": True, "message": "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
    return {"success": False, "message": "–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

@app.get("/api/trades")
async def get_trades():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
    if bot:
        return {"trades": bot.get_trades()}
    return {"trades": []}

@app.get("/api/positions")
async def get_positions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    if bot:
        return {"positions": bot.get_positions()}
    return {"positions": {}}

@app.get("/api/statistics")
async def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if bot:
        return {"statistics": bot.get_statistics()}
    return {"statistics": {}}

# WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except:
                pass

manager = ConnectionManager()

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            await manager.send_personal_message(f"Message text was: {data}", websocket)
    except WebSocketDisconnect:
        manager.disconnect(websocket)

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)