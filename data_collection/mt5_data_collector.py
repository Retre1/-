#!/usr/bin/env python3
"""
üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ MetaTrader5 –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ForexBot AI
–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import MetaTrader5 as mt5
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import time
import json
import os
from typing import Dict, List, Optional, Tuple
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('data_collection.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MT5DataCollector:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MetaTrader5"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.mt5_config = config.get('mt5', {})
        self.symbols = self.mt5_config.get('symbols', ['EURUSD'])
        self.timeframes = self.mt5_config.get('timeframes', ['M1', 'M5', 'M15', 'M30', 'H1', 'H4', 'D1'])
        self.data_dir = Path('data/market_data')
        self.data_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        self.timeframe_map = {
            'M1': mt5.TIMEFRAME_M1,
            'M5': mt5.TIMEFRAME_M5,
            'M15': mt5.TIMEFRAME_M15,
            'M30': mt5.TIMEFRAME_M30,
            'H1': mt5.TIMEFRAME_H1,
            'H4': mt5.TIMEFRAME_H4,
            'D1': mt5.TIMEFRAME_D1,
            'W1': mt5.TIMEFRAME_W1,
            'MN1': mt5.TIMEFRAME_MN1
        }
        
    def connect_mt5(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MetaTrader5"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MT5
            if not mt5.initialize():
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MT5: {mt5.last_error()}")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            mt5_config = self.mt5_config
            if mt5_config.get('server') and mt5_config.get('login'):
                # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
                if not mt5.login(
                    login=mt5_config.get('login', 0),
                    password=mt5_config.get('password', ''),
                    server=mt5_config.get('server', '')
                ):
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ MT5: {mt5.last_error()}")
                    return False
            
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MetaTrader5")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_info = mt5.account_info()
            if account_info:
                logger.info(f"üí∞ –ê–∫–∫–∞—É–Ω—Ç: {account_info.login}, –ë–∞–ª–∞–Ω—Å: {account_info.balance}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MT5: {e}")
            return False
    
    def get_symbol_info(self, symbol: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ"""
        try:
            symbol_info = mt5.symbol_info(symbol)
            if symbol_info is None:
                logger.warning(f"‚ö†Ô∏è –°–∏–º–≤–æ–ª {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
            if not mt5.symbol_select(symbol, True):
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª {symbol}")
                return None
            
            return {
                'name': symbol_info.name,
                'point': symbol_info.point,
                'digits': symbol_info.digits,
                'spread': symbol_info.spread,
                'trade_contract_size': symbol_info.trade_contract_size,
                'volume_min': symbol_info.volume_min,
                'volume_max': symbol_info.volume_max,
                'volume_step': symbol_info.volume_step
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ {symbol}: {e}")
            return None
    
    def collect_historical_data(
        self, 
        symbol: str, 
        timeframe: str, 
        start_date: datetime, 
        end_date: datetime,
        max_bars: int = 100000
    ) -> Optional[pd.DataFrame]:
        """–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            if not mt5.terminal_info():
                logger.error("‚ùå MT5 –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
                return None
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ MT5 —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            mt5_timeframe = self.timeframe_map.get(timeframe)
            if mt5_timeframe is None:
                logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
                return None
            
            logger.info(f"üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {timeframe} —Å {start_date} –ø–æ {end_date}")
            
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            rates = mt5.copy_rates_range(symbol, mt5_timeframe, start_date, end_date)
            
            if rates is None or len(rates) == 0:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {timeframe}")
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DataFrame
            df = pd.DataFrame(rates)
            df['time'] = pd.to_datetime(df['time'], unit='s')
            df.set_index('time', inplace=True)
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
            df.columns = ['open', 'high', 'low', 'close', 'tick_volume', 'spread', 'real_volume']
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            df['symbol'] = symbol
            df['timeframe'] = timeframe
            
            logger.info(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol} {timeframe}")
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {timeframe}: {e}")
            return None
    
    def collect_multiple_timeframes(
        self, 
        symbol: str, 
        start_date: datetime, 
        end_date: datetime
    ) -> Dict[str, pd.DataFrame]:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        data = {}
        
        for timeframe in self.timeframes:
            logger.info(f"üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {timeframe}")
            
            df = self.collect_historical_data(symbol, timeframe, start_date, end_date)
            if df is not None:
                data[timeframe] = df
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                self.save_data(symbol, timeframe, df)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(0.1)
        
        return data
    
    def save_data(self, symbol: str, timeframe: str, df: pd.DataFrame):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            symbol_dir = self.data_dir / symbol
            symbol_dir.mkdir(exist_ok=True)
            
            # –ò–º—è —Ñ–∞–π–ª–∞
            filename = f"{symbol}_{timeframe}_{df.index[0].strftime('%Y%m%d')}_{df.index[-1].strftime('%Y%m%d')}.csv"
            filepath = symbol_dir / filename
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            df.to_csv(filepath)
            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def get_recent_data(self, symbol: str, timeframe: str, bars: int = 1000) -> Optional[pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            mt5_timeframe = self.timeframe_map.get(timeframe)
            if mt5_timeframe is None:
                return None
            
            rates = mt5.copy_rates_from_pos(symbol, mt5_timeframe, 0, bars)
            
            if rates is None or len(rates) == 0:
                return None
            
            df = pd.DataFrame(rates)
            df['time'] = pd.to_datetime(df['time'], unit='s')
            df.set_index('time', inplace=True)
            df.columns = ['open', 'high', 'low', 'close', 'tick_volume', 'spread', 'real_volume']
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def collect_all_symbols_data(
        self, 
        start_date: datetime, 
        end_date: datetime,
        timeframes: List[str] = None
    ):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if timeframes is None:
            timeframes = self.timeframes
        
        for symbol in self.symbols:
            logger.info(f"üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ
            symbol_info = self.get_symbol_info(symbol)
            if symbol_info is None:
                continue
            
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
            data = self.collect_multiple_timeframes(symbol, start_date, end_date)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            self.save_symbol_metadata(symbol, symbol_info, data)
    
    def save_symbol_metadata(self, symbol: str, symbol_info: Dict, data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞"""
        try:
            metadata = {
                'symbol': symbol,
                'symbol_info': symbol_info,
                'data_info': {
                    timeframe: {
                        'records': len(df),
                        'start_date': df.index[0].isoformat(),
                        'end_date': df.index[-1].isoformat(),
                        'file_size': os.path.getsize(f"data/market_data/{symbol}/{symbol}_{timeframe}_*.csv")
                    }
                    for timeframe, df in data.items()
                },
                'collected_at': datetime.now().isoformat()
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata_file = self.data_dir / symbol / f"{symbol}_metadata.json"
            with open(metadata_file, 'w') as f:
                json.dump(metadata, f, indent=2)
                
            logger.info(f"üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metadata_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def validate_data_quality(self, df: pd.DataFrame, symbol: str, timeframe: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
        validation = {
            'symbol': symbol,
            'timeframe': timeframe,
            'total_records': len(df),
            'date_range': {
                'start': df.index[0].isoformat(),
                'end': df.index[-1].isoformat()
            },
            'missing_values': df.isnull().sum().to_dict(),
            'duplicates': df.index.duplicated().sum(),
            'price_range': {
                'min': df[['open', 'high', 'low', 'close']].min().to_dict(),
                'max': df[['open', 'high', 'low', 'close']].max().to_dict()
            },
            'volume_stats': {
                'mean': df['tick_volume'].mean(),
                'std': df['tick_volume'].std(),
                'max': df['tick_volume'].max()
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏
        validation['anomalies'] = {
            'zero_volume': (df['tick_volume'] == 0).sum(),
            'negative_prices': ((df[['open', 'high', 'low', 'close']] < 0).any(axis=1)).sum(),
            'high_low_inversion': (df['high'] < df['low']).sum()
        }
        
        return validation
    
    def generate_data_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        report = {
            'collection_date': datetime.now().isoformat(),
            'symbols': {},
            'total_files': 0,
            'total_size_mb': 0
        }
        
        for symbol in self.symbols:
            symbol_dir = self.data_dir / symbol
            if not symbol_dir.exists():
                continue
            
            symbol_data = {
                'timeframes': {},
                'files': [],
                'total_size_mb': 0
            }
            
            for file in symbol_dir.glob("*.csv"):
                timeframe = file.stem.split('_')[1]
                size_mb = file.stat().st_size / (1024 * 1024)
                
                symbol_data['files'].append({
                    'filename': file.name,
                    'size_mb': size_mb,
                    'timeframe': timeframe
                })
                symbol_data['total_size_mb'] += size_mb
                report['total_size_mb'] += size_mb
                report['total_files'] += 1
            
            report['symbols'][symbol] = symbol_data
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = self.data_dir / 'data_collection_report.json'
        with open(report_file, 'w') as f:
            json.dump(report, f, indent=2)
        
        logger.info(f"üìä –û—Ç—á–µ—Ç –æ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open('config.json', 'r') as f:
        config = json.load(f)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    collector = MT5DataCollector(config)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5
    if not collector.connect_mt5():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MT5")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)  # 1 –≥–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    
    logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {start_date} - {end_date}")
    
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
    collector.collect_all_symbols_data(start_date, end_date)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = collector.generate_data_report()
    
    logger.info("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
    logger.info(f"üìä –°–æ–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {report['total_files']}")
    logger.info(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {report['total_size_mb']:.2f} MB")
    
    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MT5
    mt5.shutdown()

if __name__ == "__main__":
    main()