#!/usr/bin/env python3
"""
üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è ForexBot AI
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
"""

import json
import logging
from pathlib import Path
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from data_collection.mt5_data_collector import MT5DataCollector
from training.advanced_training_system import AdvancedTrainingSystem

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('quick_training.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def quick_training_pipeline():
    """–ë—ã—Å—Ç—Ä—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è"""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è ForexBot AI")
    
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        with open('config.json', 'r') as f:
            config = json.load(f)
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # 2. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ MT5
    logger.info("üìä –≠—Ç–∞–ø 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ MetaTrader5")
    try:
        data_collector = MT5DataCollector(config)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MT5
        if not data_collector.connect_mt5():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MT5")
            return False
        
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
        symbols = config.get('mt5', {}).get('symbols', ['EURUSD'])
        timeframes = config.get('mt5', {}).get('timeframes', ['H1'])
        
        for symbol in symbols:
            for timeframe in timeframes:
                logger.info(f"üîÑ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {timeframe}")
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö (1 –≥–æ–¥)
                from datetime import datetime, timedelta
                end_date = datetime.now()
                start_date = end_date - timedelta(days=365)
                
                data = data_collector.collect_multiple_timeframes(symbol, start_date, end_date)
                
                if data:
                    logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã –¥–ª—è {symbol} {timeframe}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} {timeframe}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –¥–∞–Ω–Ω—ã—Ö
        report = data_collector.generate_data_report()
        logger.info(f"üìä –û—Ç—á–µ—Ç –æ –¥–∞–Ω–Ω—ã—Ö: {report['total_files']} —Ñ–∞–π–ª–æ–≤, {report['total_size_mb']:.2f} MB")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    # 3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    logger.info("üéì –≠—Ç–∞–ø 2: –û–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π")
    try:
        training_system = AdvancedTrainingSystem(config)
        
        # –û–±—É—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        for symbol in symbols:
            for timeframe in timeframes:
                logger.info(f"üéì –û–±—É—á–µ–Ω–∏–µ –¥–ª—è {symbol} {timeframe}")
                
                success = training_system.run_complete_training(symbol, timeframe)
                
                if success:
                    logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ {symbol} {timeframe} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol} {timeframe}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return False
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    logger.info("üìä –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
    try:
        generate_final_report(config)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    logger.info("üéâ –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return True

def generate_final_report(config):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        from pathlib import Path
        import json
        
        report = {
            'training_date': datetime.now().isoformat(),
            'config': config,
            'summary': {
                'symbols_trained': config.get('mt5', {}).get('symbols', []),
                'timeframes_trained': config.get('mt5', {}).get('timeframes', []),
                'models_trained': config.get('ai', {}).get('models', []),
                'total_models': len(config.get('ai', {}).get('models', [])) * 
                               len(config.get('mt5', {}).get('symbols', [])) * 
                               len(config.get('mt5', {}).get('timeframes', []))
            },
            'next_steps': [
                "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –≤ data/reports/",
                "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ config.json",
                "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python integrated_bot_advanced.py",
                "4. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:8000"
            ]
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_path = Path('data/reports/quick_training_report.json')
        report_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(report_path, 'w') as f:
            json.dump(report, f, indent=2)
        
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        
        # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        print("\n" + "="*50)
        print("üéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("="*50)
        print(f"üìä –û–±—É—á–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {report['summary']['total_models']}")
        print(f"üí± –°–∏–º–≤–æ–ª—ã: {', '.join(report['summary']['symbols_trained'])}")
        print(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {', '.join(report['summary']['timeframes_trained'])}")
        print(f"ü§ñ –ú–æ–¥–µ–ª–∏: {', '.join(report['summary']['models_trained'])}")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        for step in report['next_steps']:
            print(f"   {step}")
        print("="*50)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    required_files = ['config.json', 'advanced_ai_models.py', 'advanced_backtesting.py']
    missing_files = []
    
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    required_dirs = ['data', 'data/market_data', 'data/models', 'data/reports']
    
    for dir_path in required_dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
    
    logger.info("‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –æ–±—É—á–µ–Ω–∏—è ForexBot AI")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_prerequisites():
        print("‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return
    
    # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è
    success = quick_training_pipeline()
    
    if success:
        print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/")
    else:
        print("\n‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")

if __name__ == "__main__":
    main()