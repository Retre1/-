#!/usr/bin/env python3
"""
Example: Training and Saving AI Models
–ü—Ä–∏–º–µ—Ä: –û–±—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path

from training_pipeline import ModelTrainingPipeline
from model_manager import ModelManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def example_training_workflow():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ workflow –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π")
    
    # 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "mt5": {
            "symbols": ["EURUSD", "GBPUSD", "USDJPY"]
        },
        "ai": {
            "models": ["lstm", "xgboost", "lightgbm"],
            "timeframes": ["M15", "H1", "H4"],
            "lookback_periods": [50, 100, 200],
            "retrain_interval": 24,
            "min_accuracy_threshold": 0.65,
            "auto_training": True
        }
    }
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è
    print("\nüìö –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è...")
    pipeline = ModelTrainingPipeline(config)
    
    # 3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è EURUSD H1
    print("\nüéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è EURUSD H1...")
    
    try:
        results = pipeline.train_models(
            symbol="EURUSD",
            timeframe="H1",
            start_date="2023-01-01",
            end_date="2023-12-31"
        )
        
        print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
        for model_name, result in results['validation_results'].items():
            if 'accuracy' in result:
                print(f"   {model_name}: {result['accuracy']:.4f}")
        
        print("\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã backtesting:")
        backtest = results['backtest_results']
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {backtest.get('total_trades', 0)}")
        print(f"   –í–∏–Ω—Ä–µ–π—Ç: {backtest.get('win_rate', 0):.2f}%")
        print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {backtest.get('total_profit', 0):.2f}")
        print(f"   Sharpe Ratio: {backtest.get('sharpe_ratio', 0):.4f}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {backtest.get('max_drawdown', 0):.2f}%")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return
    
    # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    print("\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...")
    success = pipeline.load_models("EURUSD", "H1")
    
    if success:
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö
        model_info = pipeline.get_model_info("EURUSD", "H1")
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª—è—Ö:")
        for model_name, info in model_info.items():
            print(f"   {model_name}: {info.get('training_date', 'N/A')}")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π")
    
    # 5. –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π
    print("\nü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–æ–¥–µ–ª–µ–π...")
    model_manager = ModelManager(config)
    
    # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π...")
    success = model_manager.initialize_models(
        symbols=["EURUSD", "GBPUSD"],
        timeframes=["H1", "H4"]
    )
    
    if success:
        print("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        
        # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
        status = model_manager.get_models_status()
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π:")
        print(f"   –í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π: {status['total_models']}")
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {status['loaded_models']}")
        print(f"   –û–±—É—á–µ–Ω–æ: {status['trained_models']}")
        print(f"   –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–æ: {status['retrained_models']}")
        
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –º–æ–¥–µ–ª–µ–π")
    
    # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    print("\nüîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    import numpy as np
    import pandas as pd
    
    dates = pd.date_range('2023-12-01', '2023-12-31', freq='1H')
    np.random.seed(42)
    
    price = 100 + np.cumsum(np.random.randn(len(dates)) * 0.1
    volume = np.random.randint(1000, 10000, len(dates))
    
    test_data = pd.DataFrame({
        'open': price * (1 + np.random.randn(len(dates)) * 0.001),
        'high': price * (1 + abs(np.random.randn(len(dates)) * 0.002)),
        'low': price * (1 - abs(np.random.randn(len(dates)) * 0.002)),
        'close': price,
        'volume': volume
    }, index=dates)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    prediction = model_manager.get_prediction("EURUSD", "H1", test_data)
    
    if 'error' not in prediction:
        print("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 0):.4f}")
        print(f"   –ö–ª–∞—Å—Å: {prediction.get('ensemble_prediction', [])}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {prediction['error']}")
    
    # 8. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    performance = model_manager.get_model_performance("EURUSD", "H1")
    
    if 'error' not in performance:
        print("‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞!")
        print(f"   –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {performance.get('overall_accuracy', 0):.4f}")
        print(f"   –ú–æ–¥–µ–ª–∏: {list(performance.get('models', {}).keys())}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performance['error']}")
    
    # 9. –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è...")
    retrain_results = model_manager.retrain_models("EURUSD", "H1", force=False)
    
    if 'error' not in retrain_results:
        print("‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        if 'status' in retrain_results and retrain_results['status'] == 'not_required':
            print("   –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å")
        else:
            print("   –ú–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {retrain_results['error']}")
    
    print("\nüéâ –ü—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")

async def example_advanced_training():
    """–ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    print("\nüîß –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –æ–±—É—á–µ–Ω–∏—è...")
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "mt5": {
            "symbols": ["EURUSD", "GBPUSD", "USDJPY", "AUDUSD"]
        },
        "ai": {
            "models": ["lstm", "xgboost", "lightgbm", "random_forest"],
            "timeframes": ["M15", "H1", "H4", "D1"],
            "lookback_periods": [50, 100, 200, 500],
            "retrain_interval": 12,  # –ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤
            "min_accuracy_threshold": 0.70,  # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥
            "auto_training": True,
            "model_params": {
                "lstm": {
                    "sequence_length": 30,
                    "units": 256,
                    "dropout": 0.3,
                    "epochs": 150,
                    "batch_size": 64
                },
                "xgboost": {
                    "n_estimators": 2000,
                    "max_depth": 8,
                    "learning_rate": 0.05,
                    "subsample": 0.8,
                    "colsample_bytree": 0.8
                },
                "lightgbm": {
                    "n_estimators": 2000,
                    "max_depth": 8,
                    "learning_rate": 0.05,
                    "num_leaves": 63,
                    "feature_fraction": 0.8
                }
            }
        }
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
    pipeline = ModelTrainingPipeline(config)
    
    # –û–±—É—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    symbols = ["EURUSD", "GBPUSD"]
    timeframes = ["H1", "H4"]
    
    for symbol in symbols:
        for timeframe in timeframes:
            print(f"\nüéØ –û–±—É—á–µ–Ω–∏–µ {symbol} {timeframe}...")
            
            try:
                results = pipeline.train_models(
                    symbol=symbol,
                    timeframe=timeframe,
                    start_date="2023-01-01",
                    end_date="2023-12-31"
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                validation_results = results.get('validation_results', {})
                avg_accuracy = sum(
                    result.get('accuracy', 0) 
                    for result in validation_results.values()
                ) / len(validation_results) if validation_results else 0
                
                if avg_accuracy >= config['ai']['min_accuracy_threshold']:
                    print(f"‚úÖ {symbol} {timeframe}: —Ç–æ—á–Ω–æ—Å—Ç—å {avg_accuracy:.4f}")
                else:
                    print(f"‚ö†Ô∏è {symbol} {timeframe}: –Ω–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å {avg_accuracy:.4f}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è {symbol} {timeframe}: {e}")
    
    print("\nüéâ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

async def example_model_management():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏"""
    
    print("\nüóÑÔ∏è –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏...")
    
    config = {
        "ai": {
            "models": ["lstm", "xgboost", "lightgbm"],
            "timeframes": ["H1", "H4"],
            "auto_training": True,
            "retrain_interval": 24,
            "min_accuracy_threshold": 0.65
        }
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    model_manager = ModelManager(config)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    success = model_manager.initialize_models(
        symbols=["EURUSD", "GBPUSD"],
        timeframes=["H1", "H4"]
    )
    
    if success:
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        status = model_manager.get_models_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å: {status['total_models']} –º–æ–¥–µ–ª–µ–π")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        for symbol in ["EURUSD", "GBPUSD"]:
            for timeframe in ["H1", "H4"]:
                performance = model_manager.get_model_performance(symbol, timeframe)
                
                if 'error' not in performance:
                    accuracy = performance.get('overall_accuracy', 0)
                    print(f"üìà {symbol} {timeframe}: {accuracy:.4f}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
                    if accuracy < config['ai']['min_accuracy_threshold']:
                        print(f"üîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ {symbol} {timeframe}...")
                        model_manager.retrain_models(symbol, timeframe, force=True)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –º–æ–¥–µ–ª–µ–π...")
        model_manager.cleanup_old_models(days_to_keep=7)
        
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    
    print("\nüéâ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
    asyncio.run(example_training_workflow())
    asyncio.run(example_advanced_training())
    asyncio.run(example_model_management())
    
    print("\nüéØ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–º. –≤ TRAINING_GUIDE.md")