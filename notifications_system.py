#!/usr/bin/env python3
"""
Notifications System for ForexBot
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞
"""

import asyncio
import smtplib
import requests
from datetime import datetime
from typing import Dict, List, Optional
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import json

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.notification_history = []
        self.alert_rules = []
        
    async def send_email_notification(self, subject: str, message: str, recipients: List[str]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not self.config.get("email", {}).get("enabled", False):
            return False
            
        email_config = self.config["email"]
        
        try:
            msg = MIMEMultipart()
            msg['From'] = email_config["username"]
            msg['To'] = ", ".join(recipients)
            msg['Subject'] = subject
            
            msg.attach(MIMEText(message, 'plain'))
            
            server = smtplib.SMTP(email_config["smtp_server"], email_config["smtp_port"])
            server.starttls()
            server.login(email_config["username"], email_config["password"])
            
            text = msg.as_string()
            server.sendmail(email_config["username"], recipients, text)
            server.quit()
            
            self._log_notification("email", subject, message, recipients)
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
            return False
            
    async def send_telegram_notification(self, message: str, chat_id: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not self.config.get("telegram", {}).get("enabled", False):
            return False
            
        telegram_config = self.config["telegram"]
        chat_id = chat_id or telegram_config["chat_id"]
        
        try:
            url = f"https://api.telegram.org/bot{telegram_config['bot_token']}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML"
            }
            
            response = requests.post(url, data=data)
            
            if response.status_code == 200:
                self._log_notification("telegram", "Telegram Notification", message, [chat_id])
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {response.text}")
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
            return False
            
    async def send_webhook_notification(self, event_type: str, data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not self.config.get("webhook", {}).get("enabled", False):
            return False
            
        webhook_config = self.config["webhook"]
        
        try:
            payload = {
                "event_type": event_type,
                "timestamp": datetime.now().isoformat(),
                "data": data
            }
            
            response = requests.post(
                webhook_config["url"],
                json=payload,
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code in [200, 201]:
                self._log_notification("webhook", event_type, str(data), [webhook_config["url"]])
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {response.text}")
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook: {e}")
            return False
            
    async def send_discord_notification(self, message: str, webhook_url: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if not webhook_url and not self.config.get("discord", {}).get("webhook_url"):
            return False
            
        webhook_url = webhook_url or self.config["discord"]["webhook_url"]
        
        try:
            payload = {
                "content": message,
                "username": "ForexBot AI"
            }
            
            response = requests.post(webhook_url, json=payload)
            
            if response.status_code == 204:
                self._log_notification("discord", "Discord Notification", message, [webhook_url])
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Discord: {response.text}")
                return False
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Discord: {e}")
            return False
            
    def add_alert_rule(self, rule: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞"""
        self.alert_rules.append(rule)
        
    async def check_alerts(self, current_data: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        for rule in self.alert_rules:
            if await self._evaluate_rule(rule, current_data):
                await self._trigger_alert(rule, current_data)
                
    async def _evaluate_rule(self, rule: Dict, data: Dict) -> bool:
        """–û—Ü–µ–Ω–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–∞"""
        rule_type = rule.get("type")
        
        if rule_type == "profit_threshold":
            current_profit = data.get("total_profit", 0)
            threshold = rule.get("threshold", 0)
            return current_profit >= threshold
            
        elif rule_type == "loss_threshold":
            current_loss = abs(data.get("total_profit", 0))
            threshold = rule.get("threshold", 0)
            return current_loss >= threshold
            
        elif rule_type == "drawdown_threshold":
            current_drawdown = data.get("current_drawdown", 0)
            threshold = rule.get("threshold", 0)
            return current_drawdown >= threshold
            
        elif rule_type == "trade_count":
            current_trades = data.get("total_trades", 0)
            threshold = rule.get("threshold", 0)
            return current_trades >= threshold
            
        elif rule_type == "signal_confidence":
            signal_confidence = data.get("signal_confidence", 0)
            threshold = rule.get("threshold", 0)
            return signal_confidence >= threshold
            
        return False
        
    async def _trigger_alert(self, rule: Dict, data: Dict):
        """–°—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        alert_message = self._format_alert_message(rule, data)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await asyncio.gather(
            self.send_email_notification(
                f"–ê–ª–µ—Ä—Ç: {rule.get('name', 'Unknown Alert')}",
                alert_message,
                rule.get("email_recipients", [])
            ),
            self.send_telegram_notification(alert_message),
            self.send_webhook_notification("alert", {
                "rule": rule,
                "data": data,
                "message": alert_message
            })
        )
        
    def _format_alert_message(self, rule: Dict, data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        rule_name = rule.get("name", "Unknown Alert")
        rule_type = rule.get("type", "unknown")
        
        message = f"üö® –ê–õ–ï–†–¢: {rule_name}\n\n"
        message += f"–¢–∏–ø: {rule_type}\n"
        message += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        
        if rule_type == "profit_threshold":
            message += f"–ü—Ä–∏–±—ã–ª—å –¥–æ—Å—Ç–∏–≥–ª–∞: ${data.get('total_profit', 0):.2f}\n"
            message += f"–ü–æ—Ä–æ–≥: ${rule.get('threshold', 0):.2f}\n"
            
        elif rule_type == "loss_threshold":
            message += f"–£–±—ã—Ç–æ–∫ –¥–æ—Å—Ç–∏–≥: ${abs(data.get('total_profit', 0)):.2f}\n"
            message += f"–ü–æ—Ä–æ–≥: ${rule.get('threshold', 0):.2f}\n"
            
        elif rule_type == "drawdown_threshold":
            message += f"–ü—Ä–æ—Å–∞–¥–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞: {data.get('current_drawdown', 0):.2f}%\n"
            message += f"–ü–æ—Ä–æ–≥: {rule.get('threshold', 0):.2f}%\n"
            
        elif rule_type == "trade_count":
            message += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {data.get('total_trades', 0)}\n"
            message += f"–ü–æ—Ä–æ–≥: {rule.get('threshold', 0)}\n"
            
        elif rule_type == "signal_confidence":
            message += f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: {data.get('signal_confidence', 0)*100:.1f}%\n"
            message += f"–ü–æ—Ä–æ–≥: {rule.get('threshold', 0)*100:.1f}%\n"
            
        return message
        
    def _log_notification(self, method: str, subject: str, message: str, recipients: List[str]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        notification = {
            "method": method,
            "subject": subject,
            "message": message,
            "recipients": recipients,
            "timestamp": datetime.now().isoformat()
        }
        
        self.notification_history.append(notification)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.notification_history) > 1000:
            self.notification_history = self.notification_history[-1000:]
            
    def get_notification_history(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return self.notification_history[-limit:]
        
    async def send_trade_notification(self, trade_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ"""
        trade_type = "–ü–û–ö–£–ü–ö–ê" if trade_data["direction"] == "BUY" else "–ü–†–û–î–ê–ñ–ê"
        
        message = f"üìä –ù–û–í–ê–Ø –°–î–ï–õ–ö–ê\n\n"
        message += f"–°–∏–º–≤–æ–ª: {trade_data['symbol']}\n"
        message += f"–¢–∏–ø: {trade_type}\n"
        message += f"–û–±—ä–µ–º: {trade_data['volume']}\n"
        message += f"–¶–µ–Ω–∞: {trade_data['open_price']}\n"
        message += f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è: {trade_data.get('strategy', 'N/A')}\n"
        message += f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trade_data.get('confidence', 0)*100:.1f}%\n"
        message += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await asyncio.gather(
            self.send_telegram_notification(message),
            self.send_webhook_notification("trade_opened", trade_data)
        )
        
    async def send_profit_notification(self, profit_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã–ª–∏"""
        message = f"üí∞ –ü–†–ò–ë–´–õ–¨\n\n"
        message += f"–°–¥–µ–ª–∫–∞: {profit_data['symbol']}\n"
        message += f"–ü—Ä–∏–±—ã–ª—å: ${profit_data['profit']:.2f}\n"
        message += f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${profit_data.get('total_profit', 0):.2f}\n"
        message += f"–í–∏–Ω—Ä–µ–π—Ç: {profit_data.get('win_rate', 0):.1f}%"
        
        await asyncio.gather(
            self.send_telegram_notification(message),
            self.send_webhook_notification("profit", profit_data)
        )
        
    async def send_error_notification(self, error_data: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        message = f"‚ùå –û–®–ò–ë–ö–ê\n\n"
        message += f"–ú–æ–¥—É–ª—å: {error_data.get('module', 'Unknown')}\n"
        message += f"–û—à–∏–±–∫–∞: {error_data.get('error', 'Unknown error')}\n"
        message += f"–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        
        await asyncio.gather(
            self.send_telegram_notification(message),
            self.send_email_notification(
                "ForexBot Error",
                message,
                self.config.get("email", {}).get("recipient", [])
            ),
            self.send_webhook_notification("error", error_data)
        )

# –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
SAMPLE_CONFIG = {
    "email": {
        "enabled": True,
        "smtp_server": "smtp.gmail.com",
        "smtp_port": 587,
        "username": "your-email@gmail.com",
        "password": "your-app-password",
        "recipient": ["admin@forexbot.com"]
    },
    "telegram": {
        "enabled": True,
        "bot_token": "your-bot-token",
        "chat_id": "your-chat-id"
    },
    "webhook": {
        "enabled": True,
        "url": "https://your-webhook-url.com/webhook"
    },
    "discord": {
        "webhook_url": "https://discord.com/api/webhooks/your-webhook-url"
    }
}

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    notification_manager = NotificationManager(SAMPLE_CONFIG)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∞–ª–µ—Ä—Ç–æ–≤
    notification_manager.add_alert_rule({
        "name": "–í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å",
        "type": "profit_threshold",
        "threshold": 1000,
        "email_recipients": ["admin@forexbot.com"]
    })
    
    notification_manager.add_alert_rule({
        "name": "–ë–æ–ª—å—à–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞",
        "type": "drawdown_threshold",
        "threshold": 10
    })
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    await notification_manager.send_telegram_notification("–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç ForexBot!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
    current_data = {
        "total_profit": 1200,
        "current_drawdown": 5,
        "total_trades": 50
    }
    
    await notification_manager.check_alerts(current_data)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
    trade_data = {
        "symbol": "EURUSD",
        "direction": "BUY",
        "volume": 0.1,
        "open_price": 1.0850,
        "strategy": "trend_following",
        "confidence": 0.85
    }
    
    await notification_manager.send_trade_notification(trade_data)

if __name__ == "__main__":
    asyncio.run(main())