#!/usr/bin/env python3
"""
Integrated ForexBot with Single Pair Models
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π "–æ–¥–Ω–∞ –ø–∞—Ä–∞ - –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å"
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from pathlib import Path
import pandas as pd
import numpy as np

from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel

from single_pair_model import SinglePairModelManager, SinglePairModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Pydantic –º–æ–¥–µ–ª–∏
class TradeSignal(BaseModel):
    symbol: str
    timeframe: str
    direction: str  # BUY, SELL, HOLD
    confidence: float
    price: float
    timestamp: str

class ModelInfo(BaseModel):
    symbol: str
    timeframe: str
    trained: bool
    accuracy: float
    last_trained: Optional[str]
    backtest_results: Dict

class IntegratedForexBotSinglePair:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã"""
    
    def __init__(self, config: Dict):
        self.config = config
        self.app = FastAPI(title="ForexBot Single Pair", version="1.0.0")
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –º–æ–¥–µ–ª–µ–π
        self.model_manager = SinglePairModelManager(config)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.status = "stopped"
        self.start_time = None
        self.capital = 10000
        self.trades = []
        self.positions = {}
        self.stats = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API endpoints
        self._setup_endpoints()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        self._initialize_models()
    
    def _initialize_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            symbols = self.config.get('mt5', {}).get('symbols', ['EURUSD', 'GBPUSD', 'USDJPY'])
            timeframes = self.config.get('ai', {}).get('timeframes', ['H1', 'H4'])
            
            logger.info(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {len(symbols)} –ø–∞—Ä –∏ {len(timeframes)} —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            for symbol in symbols:
                for timeframe in timeframes:
                    self.model_manager.create_model(symbol, timeframe)
            
            logger.info("‚úÖ –ú–æ–¥–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    
    def _setup_endpoints(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API endpoints"""
        
        @self.app.get("/")
        async def root():
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
            return HTMLResponse("""
            <!DOCTYPE html>
            <html>
            <head>
                <title>ForexBot Single Pair</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .container { max-width: 1200px; margin: 0 auto; }
                    .status { padding: 10px; border-radius: 5px; margin: 10px 0; }
                    .running { background-color: #d4edda; color: #155724; }
                    .stopped { background-color: #f8d7da; color: #721c24; }
                    .model-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
                    .model-card { border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
                    .model-card.trained { border-color: #28a745; }
                    .model-card.not-trained { border-color: #dc3545; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>ü§ñ ForexBot Single Pair</h1>
                    <div id="status" class="status stopped">–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</div>
                    
                    <h2>üìä –ú–æ–¥–µ–ª–∏ –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä</h2>
                    <div id="models" class="model-grid"></div>
                    
                    <h2>üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã</h2>
                    <div id="signals"></div>
                    
                    <h2>üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                    <div id="stats"></div>
                </div>
                
                <script>
                    async function updateStatus() {
                        try {
                            const response = await fetch('/api/status');
                            const data = await response.json();
                            
                            const statusDiv = document.getElementById('status');
                            statusDiv.textContent = `–°—Ç–∞—Ç—É—Å: ${data.status}`;
                            statusDiv.className = `status ${data.status}`;
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
                        }
                    }
                    
                    async function updateModels() {
                        try {
                            const response = await fetch('/api/models');
                            const data = await response.json();
                            
                            const modelsDiv = document.getElementById('models');
                            modelsDiv.innerHTML = '';
                            
                            for (const [key, model] of Object.entries(data.models)) {
                                const card = document.createElement('div');
                                card.className = `model-card ${model.trained ? 'trained' : 'not-trained'}`;
                                
                                card.innerHTML = `
                                    <h3>${key}</h3>
                                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> ${model.trained ? '–û–±—É—á–µ–Ω–∞' : '–ù–µ –æ–±—É—á–µ–Ω–∞'}</p>
                                    <p><strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> ${(model.accuracy * 100).toFixed(2)}%</p>
                                    <p><strong>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ:</strong> ${model.last_trained || '–ù–µ—Ç'}</p>
                                `;
                                
                                modelsDiv.appendChild(card);
                            }
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error);
                        }
                    }
                    
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    setInterval(() => {
                        updateStatus();
                        updateModels();
                    }, 5000);
                    
                    // –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    updateStatus();
                    updateModels();
                </script>
            </body>
            </html>
            """)
        
        @self.app.get("/api/status")
        async def get_status():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
            return {
                "status": self.status,
                "start_time": self.start_time.isoformat() if self.start_time else None,
                "capital": self.capital,
                "total_trades": len(self.trades),
                "active_positions": len(self.positions)
            }
        
        @self.app.get("/api/models")
        async def get_models():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª—è—Ö"""
            return {
                "models": self.model_manager.get_model_status(),
                "total_models": len(self.model_manager.models),
                "trained_models": len([m for m in self.model_manager.models.values() if m.model_status['trained']])
            }
        
        @self.app.post("/api/models/train")
        async def train_models(request: Dict):
            """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
            symbol = request.get('symbol')
            timeframe = request.get('timeframe')
            start_date = request.get('start_date', '2023-01-01')
            end_date = request.get('end_date', '2023-12-31')
            
            if symbol and timeframe:
                # –û–±—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
                model = self.model_manager.create_model(symbol, timeframe)
                result = model.train_model(start_date, end_date)
                return result
            else:
                # –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
                pairs = [(s, tf) for s in ['EURUSD', 'GBPUSD', 'USDJPY'] 
                        for tf in ['H1', 'H4']]
                results = self.model_manager.train_all_models(pairs, start_date, end_date)
                return {"results": results}
        
        @self.app.post("/api/predict")
        async def get_prediction(request: Dict):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
            symbol = request.get('symbol', 'EURUSD')
            timeframe = request.get('timeframe', 'H1')
            market_data = request.get('market_data', {})
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
            df = pd.DataFrame(market_data)
            
            if df.empty:
                return {"error": "No market data provided"}
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            model = self.model_manager.create_model(symbol, timeframe)
            prediction = model.predict(df)
            
            return prediction
        
        @self.app.get("/api/models/{symbol}/{timeframe}")
        async def get_model_info(symbol: str, timeframe: str):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
            model = self.model_manager.create_model(symbol, timeframe)
            return model.get_model_info()
        
        @self.app.post("/api/models/{symbol}/{timeframe}/retrain")
        async def retrain_model(symbol: str, timeframe: str, request: Dict):
            """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏"""
            model = self.model_manager.create_model(symbol, timeframe)
            days_back = request.get('days_back', 365)
            result = model.retrain_model(days_back)
            return result
        
        @self.app.get("/api/signals")
        async def get_signals():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
            signals = []
            
            for model_key, model in self.model_manager.models.items():
                if model.model_status['trained']:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                    signal = {
                        "symbol": model.symbol,
                        "timeframe": model.timeframe,
                        "direction": "HOLD",  # –ó–∞–≥–ª—É—à–∫–∞
                        "confidence": model.model_status['accuracy'],
                        "timestamp": datetime.now().isoformat()
                    }
                    signals.append(signal)
            
            return {"signals": signals}
        
        @self.app.get("/api/statistics")
        async def get_statistics():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
            return {
                "total_models": len(self.model_manager.models),
                "trained_models": len([m for m in self.model_manager.models.values() 
                                     if m.model_status['trained']]),
                "average_accuracy": np.mean([m.model_status['accuracy'] 
                                           for m in self.model_manager.models.values() 
                                           if m.model_status['trained']]),
                "capital": self.capital,
                "total_trades": len(self.trades),
                "active_positions": len(self.positions)
            }
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.status = "running"
        self.start_time = datetime.now()
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.status = "stopped"
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            "status": self.status,
            "start_time": self.start_time.isoformat() if self.start_time else None,
            "capital": self.capital,
            "total_trades": len(self.trades),
            "active_positions": len(self.positions),
            "models_info": self.model_manager.get_model_status()
        }

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
config = {
    "mt5": {
        "symbols": ["EURUSD", "GBPUSD", "USDJPY", "AUDUSD", "USDCAD"]
    },
    "ai": {
        "models": ["lstm", "xgboost", "lightgbm"],
        "timeframes": ["H1", "H4"],
        "min_accuracy_threshold": 0.65
    }
}

bot = IntegratedForexBotSinglePair(config)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import uvicorn
    
    print("üöÄ –ó–∞–ø—É—Å–∫ ForexBot Single Pair...")
    bot.start_bot()
    
    uvicorn.run(bot.app, host="0.0.0.0", port=8000)