#!/usr/bin/env python3
"""
üìä –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
"""

import json
import sys

def display_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    
    try:
        with open('simple_models/EURUSD_SIMPLE_DEMO/results_summary.json', 'r') as f:
            results = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é.")
        return
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–≠–¢–ê–ü–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø                         ‚ïë
‚ïë                      XGBoost ‚Üí LSTM ‚Üí Ensemble                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë –ú–æ–¥–µ–ª—å         ‚ïë MSE          ‚ïë –¢–æ—á–Ω–æ—Å—Ç—å (%)     ‚ïë –í—Ä–µ–º—è (—Å–µ–∫)   ‚ïë –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏   ‚ïë")
    print("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")
    
    # RandomForest
    forest = results['forest']
    print(f"‚ïë RandomForest   ‚ïë {forest['test_mse']:.2e}   ‚ïë {forest['directional_accuracy']:>14.1f}% ‚ïë {forest['training_time']:>11.1f}   ‚ïë –ë—ã—Å—Ç—Ä–æ, –ø—Ä–æ—Å—Ç–æ ‚ïë")
    
    # LSTM
    lstm = results['lstm']
    print(f"‚ïë LSTM           ‚ïë {lstm['test_mse']:.2e}   ‚ïë {lstm['directional_accuracy']:>14.1f}% ‚ïë {lstm['training_time']:>11.1f}   ‚ïë –í—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å‚ïë")
    
    # Ensemble
    ensemble = results['ensemble']
    print(f"‚ïë Ensemble       ‚ïë {ensemble['test_mse']:.2e}   ‚ïë {ensemble['directional_accuracy']:>14.1f}% ‚ïë {ensemble['training_time']:>11.1f}   ‚ïë –õ—É—á—à–∏–π –±–∞–ª–∞–Ω—Å ‚ïë")
    
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    
    # –ê–Ω–∞–ª–∏–∑
    best_accuracy = max(forest['directional_accuracy'], lstm['directional_accuracy'], ensemble['directional_accuracy'])
    fastest_time = min(forest['training_time'], lstm['training_time'], ensemble['training_time'])
    
    print(f"\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print(f"   üéØ –õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {best_accuracy:.1f}% (LSTM)")
    print(f"   ‚ö° –°–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ: {fastest_time:.1f}—Å (Ensemble)")
    print(f"   ‚öñÔ∏è –í–µ—Å–∞ –∞–Ω—Å–∞–º–±–ª—è: RandomForest={ensemble['weights'][0]:.1f}, LSTM={ensemble['weights'][1]:.1f}")
    
    print(f"\nüöÄ –ü–û–≠–¢–ê–ü–ù–´–ô –ü–†–û–ì–†–ï–°–°:")
    print(f"   –≠–¢–ê–ü 1 (RandomForest): {forest['directional_accuracy']:.1f}% –∑–∞ {forest['training_time']:.1f}—Å")
    print(f"   –≠–¢–ê–ü 2 (LSTM):         {lstm['directional_accuracy']:.1f}% –∑–∞ {lstm['training_time']:.1f}—Å (+{lstm['directional_accuracy']-forest['directional_accuracy']:+.1f}%)")
    print(f"   –≠–¢–ê–ü 3 (Ensemble):     {ensemble['directional_accuracy']:.1f}% –∑–∞ {ensemble['training_time']:.1f}—Å")
    
    improvement = ensemble['directional_accuracy'] - forest['directional_accuracy']
    print(f"\n‚úÖ –û–ë–©–ï–ï –£–õ–£–ß–®–ï–ù–ò–ï: {improvement:+.1f}% (—Å {forest['directional_accuracy']:.1f}% –¥–æ {ensemble['directional_accuracy']:.1f}%)")
    
    total_time = forest['training_time'] + lstm['training_time'] + ensemble['training_time']
    print(f"‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø: {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if ensemble['directional_accuracy'] > 60:
        print("   üü¢ –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω")
    elif ensemble['directional_accuracy'] > 55:
        print("   üü° –•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
        print("   üìù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö, XGBoost, –Ω–∞—Å—Ç–æ—è—â–∏–π LSTM")
    else:
        print("   üü† –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∞–ª—å–Ω–µ–π—à–∞—è —Ä–∞–±–æ—Ç–∞")
        print("   üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    
    print(f"\nüéØ –°–õ–ï–î–£–Æ–©–ò–ô –£–†–û–í–ï–ù–¨:")
    print("   1. ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å XGBoost –∏ TensorFlow")
    print("   2. üìä –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
    print("   3. üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Optuna –¥–ª—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("   4. üìà –î–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("   5. üöÄ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞")

if __name__ == "__main__":
    display_results()