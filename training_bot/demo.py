#!/usr/bin/env python3
"""
üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–≠–¢–ê–ü–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã: XGBoost ‚Üí LSTM ‚Üí Ensemble
"""

import asyncio
import sys
import time
from datetime import datetime
from loguru import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.remove()
logger.add(sys.stdout, format="<green>{time:HH:mm:ss}</green> | <level>{level}</level> | <cyan>{message}</cyan>", level="INFO")

from progressive_trainer import ProgressiveForexTrainer


async def demo_progressive_training():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           üéØ –î–ï–ú–û –û–ë–£–ß–ï–ù–ò–Ø                                     ‚ïë
‚ïë                   XGBoost ‚Üí LSTM ‚Üí Ensemble                                   ‚ïë
‚ïë                                                                               ‚ïë
‚ïë  –≠—Ç–æ –±—ã—Å—Ç—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è AI –º–æ–¥–µ–ª–µ–π                     ‚ïë
‚ïë  –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ñ–æ—Ä–µ–∫—Å —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Solana —Ç–æ–∫–µ–Ω–∞                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
    trainer = ProgressiveForexTrainer("EURUSD_DEMO")
    
    try:
        # =================== –î–ï–ú–û –ü–ê–†–ê–ú–ï–¢–†–´ ===================
        logger.info("‚ö° –î–ï–ú–û –†–ï–ñ–ò–ú: —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        logger.info("üé≤ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = trainer.load_data()
        X, y, feature_columns = trainer.prepare_data(df)
        
        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã: {len(X)} –æ–±—Ä–∞–∑—Ü–æ–≤, {len(feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # =================== –≠–¢–ê–ü 1: XGBoost ===================
        print("\n" + "="*80)
        logger.info("üéØ –≠–¢–ê–ü 1: –ë–´–°–¢–†–û–ï –û–ë–£–ß–ï–ù–ò–ï XGBoost")
        logger.info("   –¶–µ–ª—å: –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è")
        logger.info("   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: 5 trials –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        start_time = time.time()
        
        xgb_results = trainer.train_xgboost_phase(
            X, y, 
            optimize=True, 
            trials=5  # –ë—ã—Å—Ç—Ä–æ –¥–ª—è –¥–µ–º–æ
        )
        
        xgb_time = time.time() - start_time
        logger.info(f"‚úÖ XGBoost –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {xgb_time:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: MSE={xgb_results['test_mse']:.6f}, –¢–æ—á–Ω–æ—Å—Ç—å={xgb_results['directional_accuracy']:.1f}%")
        
        # =================== –≠–¢–ê–ü 2: LSTM ===================
        print("\n" + "="*80)
        logger.info("üß† –≠–¢–ê–ü 2: –ë–´–°–¢–†–û–ï –û–ë–£–ß–ï–ù–ò–ï LSTM")
        logger.info("   –¶–µ–ª—å: –£–ª—É—á—à–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏")
        logger.info("   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: 3 trials –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, 30 —ç–ø–æ—Ö")
        
        start_time = time.time()
        
        lstm_results = trainer.train_lstm_phase(
            X, y,
            sequence_length=30,  # –ö–æ—Ä–æ—á–µ –¥–ª—è –¥–µ–º–æ
            optimize=True,
            trials=3  # –ë—ã—Å—Ç—Ä–æ –¥–ª—è –¥–µ–º–æ
        )
        
        lstm_time = time.time() - start_time
        logger.info(f"‚úÖ LSTM –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {lstm_time:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: MSE={lstm_results['test_mse']:.6f}, –¢–æ—á–Ω–æ—Å—Ç—å={lstm_results['directional_accuracy']:.1f}%")
        
        # =================== –≠–¢–ê–ü 3: ENSEMBLE ===================
        print("\n" + "="*80)
        logger.info("üèÜ –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï ENSEMBLE")
        logger.info("   –¶–µ–ª—å: –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ª—É—á—à–µ–µ –æ—Ç XGBoost –∏ LSTM")
        logger.info("   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤")
        
        start_time = time.time()
        
        ensemble_results = trainer.train_ensemble_phase(X, y)
        
        ensemble_time = time.time() - start_time
        logger.info(f"‚úÖ Ensemble –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {ensemble_time:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: MSE={ensemble_results['test_mse']:.6f}, –¢–æ—á–Ω–æ—Å—Ç—å={ensemble_results['directional_accuracy']:.1f}%")
        
        # =================== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===================
        print("\n" + "="*80)
        logger.info("üìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô")
        print("="*80)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_table = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë –ú–æ–¥–µ–ª—å         ‚ïë MSE          ‚ïë –¢–æ—á–Ω–æ—Å—Ç—å (%)     ‚ïë –í—Ä–µ–º—è (—Å–µ–∫)   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï¨‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë XGBoost        ‚ïë {xgb_results['test_mse']:.6f}   ‚ïë {xgb_results['directional_accuracy']:>14.1f}% ‚ïë {xgb_time:>11.1f}   ‚ïë
‚ïë LSTM           ‚ïë {lstm_results['test_mse']:.6f}   ‚ïë {lstm_results['directional_accuracy']:>14.1f}% ‚ïë {lstm_time:>11.1f}   ‚ïë
‚ïë Ensemble       ‚ïë {ensemble_results['test_mse']:.6f}   ‚ïë {ensemble_results['directional_accuracy']:>14.1f}% ‚ïë {ensemble_time:>11.1f}   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï©‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        print(results_table)
        
        # –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å
        models = {
            'XGBoost': xgb_results,
            'LSTM': lstm_results, 
            'Ensemble': ensemble_results
        }
        
        best_model = min(models.keys(), key=lambda x: models[x]['test_mse'])
        best_mse = models[best_model]['test_mse']
        best_acc = models[best_model]['directional_accuracy']
        
        logger.info(f"üèÜ –õ–£–ß–®–ê–Ø –ú–û–î–ï–õ–¨: {best_model}")
        logger.info(f"   üìä MSE: {best_mse:.6f}")
        logger.info(f"   üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {best_acc:.1f}%")
        
        # –í–µ—Å–∞ –∞–Ω—Å–∞–º–±–ª—è
        weights = ensemble_results['weights']
        logger.info(f"‚öñÔ∏è –í–µ—Å–∞ –≤ –∞–Ω—Å–∞–º–±–ª–µ: XGBoost={weights[0]:.2f}, LSTM={weights[1]:.2f}")
        
        total_time = xgb_time + lstm_time + ensemble_time
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –¥–µ–º–æ: {total_time:.1f} —Å–µ–∫—É–Ω–¥ ({total_time/60:.1f} –º–∏–Ω—É—Ç)")
        
        # =================== –°–û–ó–î–ê–ù–ò–ï –ì–†–ê–§–ò–ö–û–í ===================
        print("\n" + "="*80)
        logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
        
        try:
            trainer.create_comparison_plots()
            logger.info("‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏: {e}")
        
        # =================== –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï ===================
        print("\n" + "="*80)
        logger.info("üéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("="*80)
        
        conclusion = f"""
üí° –í–´–í–û–î–´ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò:

‚úÖ –ü–æ—ç—Ç–∞–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!
   ‚Ä¢ –ö–∞–∂–¥—ã–π —ç—Ç–∞–ø –¥–æ–±–∞–≤–ª—è–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫ –æ–±—â–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
   ‚Ä¢ XGBoost –¥–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
   ‚Ä¢ LSTM —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
   ‚Ä¢ Ensemble –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª—É—á—à–µ–µ –æ—Ç –æ–±–µ–∏—Ö –º–æ–¥–µ–ª–µ–π

üìà –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π:
   ‚Ä¢ Directional Accuracy > 50% —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ö–æ—Ä–æ—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
   ‚Ä¢ MSE –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ü–µ–Ω—ã
   ‚Ä¢ Ensemble –æ–±—ã—á–Ω–æ –¥–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
   ‚Ä¢ XGBoost: –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ (~{xgb_time:.0f}—Å)
   ‚Ä¢ LSTM: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (~{lstm_time:.0f}—Å) 
   ‚Ä¢ Ensemble: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (~{ensemble_time:.0f}—Å)

üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
   1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   2. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ trials –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
   3. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞–ª—é—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
   4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–π—Ç–µ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞

üíæ –ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: progressive_models/EURUSD_DEMO/
        """
        
        print(conclusion)
        
        return {
            'xgboost': xgb_results,
            'lstm': lstm_results,
            'ensemble': ensemble_results
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None


async def quick_comparison_demo():
    """–ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ—Ö –ø–æ–¥—Ö–æ–¥–æ–≤"""
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        ‚ö° –ë–´–°–¢–†–û–ï –°–†–ê–í–ù–ï–ù–ò–ï                                    ‚ïë
‚ïë            –ö–∞–∫–∞—è –º–æ–¥–µ–ª—å –ª—É—á—à–µ –¥–ª—è —Ñ–æ—Ä–µ–∫—Å —Ç–æ—Ä–≥–æ–≤–ª–∏?                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    logger.info("‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
    
    results = await demo_progressive_training()
    
    if results:
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        xgb = results['xgboost']
        lstm = results['lstm'] 
        ensemble = results['ensemble']
        
        print(f"""
üéØ –ö–†–ê–¢–ö–ò–ï –í–´–í–û–î–´:

1Ô∏è‚É£ XGBoost:
   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (–æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ)
   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {'‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' if xgb['directional_accuracy'] > 55 else '‚≠ê‚≠ê‚≠ê‚≠ê' if xgb['directional_accuracy'] > 50 else '‚≠ê‚≠ê‚≠ê'}
   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (–ª–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
   
2Ô∏è‚É£ LSTM:  
   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: ‚≠ê‚≠ê‚≠ê (—Ç—Ä–µ–±—É–µ—Ç –≤—Ä–µ–º–µ–Ω–∏)
   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {'‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' if lstm['directional_accuracy'] > 55 else '‚≠ê‚≠ê‚≠ê‚≠ê' if lstm['directional_accuracy'] > 50 else '‚≠ê‚≠ê‚≠ê'}
   ‚Ä¢ –ì–∏–±–∫–æ—Å—Ç—å: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (–º–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫)
   
3Ô∏è‚É£ Ensemble:
   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: ‚≠ê‚≠ê‚≠ê‚≠ê (–±—ã—Å—Ç—Ä–æ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è)
   ‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {'‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê' if ensemble['directional_accuracy'] > 55 else '‚≠ê‚≠ê‚≠ê‚≠ê' if ensemble['directional_accuracy'] > 50 else '‚≠ê‚≠ê‚≠ê'}
   ‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (—Å–∞–º–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è)

üèÜ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: {'Ensemble' if ensemble['directional_accuracy'] == max(xgb['directional_accuracy'], lstm['directional_accuracy'], ensemble['directional_accuracy']) else 'XGBoost' if xgb['directional_accuracy'] >= lstm['directional_accuracy'] else 'LSTM'}
        """)
    
    logger.info("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ"""
    
    print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
    print("1. –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
    print("2. –ë—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
    print("3. –í—ã—Ö–æ–¥")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é...")
            asyncio.run(demo_progressive_training())
            
        elif choice == "2":
            logger.info("‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...")
            asyncio.run(quick_comparison_demo())
            
        elif choice == "3":
            logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            
        else:
            logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            main()
            
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()