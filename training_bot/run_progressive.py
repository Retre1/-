#!/usr/bin/env python3
"""
üöÄ –ó–∞–ø—É—Å–∫ –ø–æ—ç—Ç–∞–ø–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: XGBoost ‚Üí LSTM ‚Üí Ensemble
–ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
"""

import asyncio
import argparse
import sys
import os
from datetime import datetime
from loguru import logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('..')

from progressive_trainer import ProgressiveForexTrainer


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    logger.remove()
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å —Ü–≤–µ—Ç–∞–º–∏
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | <cyan>{message}</cyan>",
        level="INFO",
        colorize=True
    )
    
    # –§–∞–π–ª –ª–æ–≥–∞
    log_file = f"logs/training_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    os.makedirs("logs", exist_ok=True)
    
    logger.add(
        log_file,
        format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {message}",
        level="DEBUG",
        rotation="10 MB"
    )
    
    logger.info(f"üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ {log_file}")


def print_banner():
    """–ö—Ä–∞—Å–∏–≤—ã–π –±–∞–Ω–Ω–µ—Ä"""
    
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        ü§ñ PROGRESSIVE FOREX TRAINER                           ‚ïë
‚ïë                      –ü–æ—ç—Ç–∞–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π                          ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üéØ –≠–¢–ê–ü 1: XGBoost     ‚Üí –ë—ã—Å—Ç—Ä–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ (10-30 –º–∏–Ω)                  ‚ïë
‚ïë  üß† –≠–¢–ê–ü 2: LSTM        ‚Üí –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ (1-4 —á–∞—Å–∞)                    ‚ïë  
‚ïë  üèÜ –≠–¢–ê–ü 3: Ensemble    ‚Üí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    
    print(banner)


def print_options():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏"""
    
    options = """
üìã –î–û–°–¢–£–ü–ù–´–ï –û–ü–¶–ò–ò:

üöÄ –†–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞:
   --quick         –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ (10-15 –º–∏–Ω)
   --standard      –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (1-3 —á–∞—Å–∞) [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é]
   --professional  –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (4-8 —á–∞—Å–æ–≤)

üéØ –°–∏–º–≤–æ–ª—ã:
   --symbol EURUSD    –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: EURUSD]
   
üìÇ –î–∞–Ω–Ω—ã–µ:
   --data path/to/data.csv    –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
                              (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ)

ü§ñ –ú–æ–¥–µ–ª–∏:
   --xgboost-only     –¢–æ–ª—å–∫–æ XGBoost
   --lstm-only        –¢–æ–ª—å–∫–æ LSTM  
   --ensemble-only    –¢–æ–ª—å–∫–æ Ensemble (—Ç—Ä–µ–±—É–µ—Ç —É–∂–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π)

üíª –ü—Ä–∏–º–µ—Ä—ã:
   python run_progressive.py --quick
   python run_progressive.py --symbol GBPUSD --standard
   python run_progressive.py --data ../data/collected/EURUSD.csv --professional
   python run_progressive.py --xgboost-only --quick
    """
    
    print(options)


async def run_training(args):
    """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    logger.info(f"üéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è {args.symbol}")
    logger.info(f"üìä –†–µ–∂–∏–º: {args.mode}")
    
    if args.data:
        logger.info(f"üìÇ –î–∞–Ω–Ω—ã–µ: {args.data}")
    else:
        logger.info("üé≤ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞
    trainer = ProgressiveForexTrainer(args.symbol)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —Ä–µ–∂–∏–º—É
    quick_mode = (args.mode == 'quick')
    
    try:
        if args.xgboost_only:
            logger.info("üéØ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ XGBoost")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df = trainer.load_data(args.data)
            X, y, _ = trainer.prepare_data(df)
            
            # –û–±—É—á–µ–Ω–∏–µ XGBoost
            trials = 10 if quick_mode else 50
            results = trainer.train_xgboost_phase(X, y, optimize=True, trials=trials)
            
        elif args.lstm_only:
            logger.info("üß† –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ LSTM")
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df = trainer.load_data(args.data)
            X, y, _ = trainer.prepare_data(df)
            
            # –û–±—É—á–µ–Ω–∏–µ LSTM
            trials = 5 if quick_mode else 30
            results = trainer.train_lstm_phase(X, y, optimize=True, trials=trials)
            
        elif args.ensemble_only:
            logger.info("üèÜ –†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ Ensemble")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            model_dir = f"progressive_models/{args.symbol}"
            if not (os.path.exists(f"{model_dir}/xgboost_model.pkl") and 
                   os.path.exists(f"{model_dir}/lstm_model.h5")):
                logger.error("‚ùå –î–ª—è Ensemble –Ω—É–∂–Ω—ã –æ–±—É—á–µ–Ω–Ω—ã–µ XGBoost –∏ LSTM –º–æ–¥–µ–ª–∏")
                logger.info("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ XGBoost –∏ LSTM")
                return
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            logger.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            
        else:
            logger.info("üöÄ –†–µ–∂–∏–º: –ø–æ–ª–Ω–æ–µ –ø–æ—ç—Ç–∞–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
            
            # –ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            results = await trainer.run_progressive_training(
                data_path=args.data,
                quick_mode=quick_mode
            )
        
        logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        return results
        
    except KeyboardInterrupt:
        logger.warning("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
        import traceback
        logger.debug(traceback.format_exc())


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    setup_logging()
    print_banner()
    
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(
        description="ü§ñ Progressive Forex Trainer - –ü–æ—ç—Ç–∞–ø–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ AI –º–æ–¥–µ–ª–µ–π",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    # –†–µ–∂–∏–º—ã
    mode_group = parser.add_mutually_exclusive_group()
    mode_group.add_argument('--quick', action='store_const', dest='mode', const='quick',
                           help='‚ö° –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ (10-15 –º–∏–Ω)')
    mode_group.add_argument('--standard', action='store_const', dest='mode', const='standard', 
                           help='üî• –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (1-3 —á–∞—Å–∞)')
    mode_group.add_argument('--professional', action='store_const', dest='mode', const='professional',
                           help='üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (4-8 —á–∞—Å–æ–≤)')
    
    # –ú–æ–¥–µ–ª–∏
    model_group = parser.add_mutually_exclusive_group()
    model_group.add_argument('--xgboost-only', action='store_true',
                            help='üéØ –û–±—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ XGBoost')
    model_group.add_argument('--lstm-only', action='store_true',
                            help='üß† –û–±—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ LSTM')
    model_group.add_argument('--ensemble-only', action='store_true',
                            help='üèÜ –°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ Ensemble (—Ç—Ä–µ–±—É–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π)')
    
    # –î–∞–Ω–Ω—ã–µ
    parser.add_argument('--symbol', default='EURUSD',
                       help='üí± –í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: EURUSD)')
    parser.add_argument('--data', 
                       help='üìÇ –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument('--help-options', action='store_true',
                       help='üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã')
    
    args = parser.parse_args()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏
    if args.help_options:
        print_options()
        return
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not args.mode:
        args.mode = 'standard'
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if args.data and not os.path.exists(args.data):
        logger.error(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.data}")
        return
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    logger.info("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Progressive Forex Trainer!")
    
    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    results = asyncio.run(run_training(args))
    
    if results:
        logger.info("üéä –í—Å–µ –≥–æ—Ç–æ–≤–æ! –í–∞—à–∏ AI –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –º–æ–¥–µ–ª–∏
        model_dir = f"progressive_models/{args.symbol}"
        logger.info(f"üíæ –ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {model_dir}")
        logger.info(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {model_dir}/comparison_results.png")


if __name__ == "__main__":
    main()