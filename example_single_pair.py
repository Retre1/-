#!/usr/bin/env python3
"""
Example: Single Pair Model System
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã "–æ–¥–Ω–∞ –ø–∞—Ä–∞ - –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å"
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path

from single_pair_model import SinglePairModelManager, SinglePairModel

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def example_single_pair_training():
    """–ü—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä"""
    
    print("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã '–û–¥–Ω–∞ –ø–∞—Ä–∞ - –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å'")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        "ai": {
            "models": ["lstm", "xgboost", "lightgbm"],
            "timeframes": ["H1", "H4"],
            "min_accuracy_threshold": 0.65
        }
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = SinglePairModelManager(config)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    pairs = [
        ("EURUSD", "H1"),
        ("GBPUSD", "H1"),
        ("USDJPY", "H1"),
        ("EURUSD", "H4"),
        ("GBPUSD", "H4")
    ]
    
    print(f"\nüìö –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –¥–ª—è {len(pairs)} –ø–∞—Ä...")
    
    # –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    results = manager.train_all_models(
        pairs=pairs,
        start_date="2023-01-01",
        end_date="2023-12-31"
    )
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è:")
    successful_models = 0
    
    for pair_key, result in results.items():
        if 'error' not in result:
            successful_models += 1
            validation = result.get('validation_results', {})
            backtest = result.get('backtest_results', {})
            
            print(f"\n‚úÖ {pair_key}:")
            print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {validation.get('ensemble_accuracy', 0):.4f}")
            print(f"   –°–¥–µ–ª–∫–∏: {backtest.get('total_trades', 0)}")
            print(f"   –í–∏–Ω—Ä–µ–π—Ç: {backtest.get('win_rate', 0):.2f}%")
            print(f"   –ü—Ä–∏–±—ã–ª—å: {backtest.get('total_profit', 0):.2f}")
            print(f"   Sharpe Ratio: {backtest.get('sharpe_ratio', 0):.4f}")
        else:
            print(f"\n‚ùå {pair_key}: –û—à–∏–±–∫–∞ - {result['error']}")
    
    print(f"\nüìà –£—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–æ: {successful_models}/{len(pairs)} –º–æ–¥–µ–ª–µ–π")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    status = manager.get_model_status()
    print(f"\nüìã –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π:")
    for pair_key, info in status.items():
        status_text = "‚úÖ –û–±—É—á–µ–Ω–∞" if info['trained'] else "‚ùå –ù–µ –æ–±—É—á–µ–Ω–∞"
        accuracy_text = f"–¢–æ—á–Ω–æ—Å—Ç—å: {info['accuracy']:.4f}" if info['trained'] else "–¢–æ—á–Ω–æ—Å—Ç—å: N/A"
        print(f"   {pair_key}: {status_text} | {accuracy_text}")
    
    return manager

async def example_prediction_workflow(manager: SinglePairModelManager):
    """–ü—Ä–∏–º–µ—Ä workflow –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
    
    print("\nüîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä
    import numpy as np
    import pandas as pd
    
    test_data = {}
    
    for symbol in ["EURUSD", "GBPUSD", "USDJPY"]:
        for timeframe in ["H1", "H4"]:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            dates = pd.date_range('2023-12-01', '2023-12-31', freq='1H')
            np.random.seed(42)
            
            # –†–∞–∑–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä
            if symbol == 'EURUSD':
                base_price = 1.0850
            elif symbol == 'GBPUSD':
                base_price = 1.2650
            elif symbol == 'USDJPY':
                base_price = 150.0
            else:
                base_price = 1.0
            
            price = base_price + np.cumsum(np.random.randn(len(dates)) * 0.001)
            volume = np.random.randint(1000, 10000, len(dates))
            
            df = pd.DataFrame({
                'open': price * (1 + np.random.randn(len(dates)) * 0.0005),
                'high': price * (1 + abs(np.random.randn(len(dates)) * 0.001)),
                'low': price * (1 - abs(np.random.randn(len(dates)) * 0.001)),
                'close': price,
                'volume': volume
            }, index=dates)
            
            test_data[f"{symbol}_{timeframe}"] = df
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    predictions = manager.predict_all(test_data)
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
    for pair_key, prediction in predictions.items():
        if 'error' not in prediction:
            print(f"\n‚úÖ {pair_key}:")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction.get('confidence', 0):.4f}")
            print(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {prediction.get('ensemble_prediction', [])}")
            print(f"   –ú–æ–¥–µ–ª—å: {prediction.get('model_info', {}).get('symbol', 'N/A')}")
        else:
            print(f"\n‚ùå {pair_key}: –û—à–∏–±–∫–∞ - {prediction['error']}")

async def example_model_management(manager: SinglePairModelManager):
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ–ª—è–º–∏"""
    
    print("\nüóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏...")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏
    eurusd_h1_model = manager.create_model("EURUSD", "H1")
    model_info = eurusd_h1_model.get_model_info()
    
    print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ EURUSD H1:")
    print(f"   –°—Ç–∞—Ç—É—Å: {'–û–±—É—á–µ–Ω–∞' if model_info['trained'] else '–ù–µ –æ–±—É—á–µ–Ω–∞'}")
    print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {model_info['accuracy']:.4f}")
    print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ: {model_info['last_trained'] or '–ù–µ—Ç'}")
    
    if model_info['trained']:
        backtest = model_info.get('backtest_results', {})
        print(f"   Backtesting —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"     –°–¥–µ–ª–∫–∏: {backtest.get('total_trades', 0)}")
        print(f"     –í–∏–Ω—Ä–µ–π—Ç: {backtest.get('win_rate', 0):.2f}%")
        print(f"     –ü—Ä–∏–±—ã–ª—å: {backtest.get('total_profit', 0):.2f}")
    
    # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    print(f"\nüîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ EURUSD H1...")
    retrain_result = eurusd_h1_model.retrain_model(days_back=180)
    
    if 'error' not in retrain_result:
        print("‚úÖ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        updated_info = eurusd_h1_model.get_model_info()
        print(f"   –ù–æ–≤–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {updated_info['accuracy']:.4f}")
        print(f"   –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {updated_info['last_trained']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {retrain_result['error']}")

async def example_performance_comparison(manager: SinglePairModelManager):
    """–ü—Ä–∏–º–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π"""
    
    print("\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π...")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
    status = manager.get_model_status()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–∞—Ä–∞–º
    pair_performance = {}
    timeframe_performance = {}
    
    for pair_key, info in status.items():
        if info['trained']:
            symbol, timeframe = pair_key.split('_')
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º
            if symbol not in pair_performance:
                pair_performance[symbol] = []
            pair_performance[symbol].append({
                'timeframe': timeframe,
                'accuracy': info['accuracy'],
                'backtest': info.get('backtest_results', {})
            })
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            if timeframe not in timeframe_performance:
                timeframe_performance[timeframe] = []
            timeframe_performance[timeframe].append({
                'symbol': symbol,
                'accuracy': info['accuracy'],
                'backtest': info.get('backtest_results', {})
            })
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–∞—Ä–∞–º
    print("\nüìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –ø–∞—Ä–∞–º:")
    for symbol, models in pair_performance.items():
        avg_accuracy = sum(m['accuracy'] for m in models) / len(models)
        total_trades = sum(m['backtest'].get('total_trades', 0) for m in models)
        avg_win_rate = sum(m['backtest'].get('win_rate', 0) for m in models) / len(models)
        
        print(f"\n   {symbol}:")
        print(f"     –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.4f}")
        print(f"     –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"     –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {avg_win_rate:.2f}%")
        
        for model in models:
            print(f"       {model['timeframe']}: {model['accuracy']:.4f} —Ç–æ—á–Ω–æ—Å—Ç—å")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
    print("\nüìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º:")
    for timeframe, models in timeframe_performance.items():
        avg_accuracy = sum(m['accuracy'] for m in models) / len(models)
        total_trades = sum(m['backtest'].get('total_trades', 0) for m in models)
        avg_win_rate = sum(m['backtest'].get('win_rate', 0) for m in models) / len(models)
        
        print(f"\n   {timeframe}:")
        print(f"     –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {avg_accuracy:.4f}")
        print(f"     –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
        print(f"     –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç: {avg_win_rate:.2f}%")
        
        for model in models:
            print(f"       {model['symbol']}: {model['accuracy']:.4f} —Ç–æ—á–Ω–æ—Å—Ç—å")

async def example_automated_trading_simulation(manager: SinglePairModelManager):
    """–ü—Ä–∏–º–µ—Ä —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    print("\nü§ñ –°–∏–º—É–ª—è—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    class TradingSimulator:
        def __init__(self, initial_capital=10000):
            self.capital = initial_capital
            self.positions = {}
            self.trades = []
            self.equity_curve = []
        
        def execute_trade(self, symbol, direction, price, confidence):
            """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
            
            if direction == 'HOLD':
                return
            
            position_size = self.capital * 0.1  # 10% –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
            
            if direction == 'BUY':
                if symbol in self.positions:
                    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                    old_position = self.positions[symbol]
                    profit = (price - old_position['price']) * old_position['size']
                    self.capital += profit
                    
                    self.trades.append({
                        'symbol': symbol,
                        'direction': 'SELL',
                        'entry_price': old_position['price'],
                        'exit_price': price,
                        'profit': profit,
                        'confidence': confidence,
                        'timestamp': datetime.now().isoformat()
                    })
                
                # –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                self.positions[symbol] = {
                    'direction': 'BUY',
                    'price': price,
                    'size': position_size / price,
                    'confidence': confidence
                }
                
            elif direction == 'SELL':
                if symbol in self.positions:
                    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                    old_position = self.positions[symbol]
                    profit = (old_position['price'] - price) * old_position['size']
                    self.capital += profit
                    
                    self.trades.append({
                        'symbol': symbol,
                        'direction': 'BUY',
                        'entry_price': old_position['price'],
                        'exit_price': price,
                        'profit': profit,
                        'confidence': confidence,
                        'timestamp': datetime.now().isoformat()
                    })
                
                # –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                self.positions[symbol] = {
                    'direction': 'SELL',
                    'price': price,
                    'size': position_size / price,
                    'confidence': confidence
                }
            
            self.equity_curve.append(self.capital)
        
        def get_statistics(self):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
            if not self.trades:
                return {}
            
            profitable_trades = len([t for t in self.trades if t['profit'] > 0])
            total_profit = sum(t['profit'] for t in self.trades)
            
            return {
                'total_trades': len(self.trades),
                'profitable_trades': profitable_trades,
                'win_rate': (profitable_trades / len(self.trades)) * 100,
                'total_profit': total_profit,
                'final_capital': self.capital,
                'return_percent': ((self.capital - 10000) / 10000) * 100
            }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    simulator = TradingSimulator()
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π
    print("üìà –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    import numpy as np
    import pandas as pd
    
    for symbol in ["EURUSD", "GBPUSD"]:
        for timeframe in ["H1"]:
            # –°–æ–∑–¥–∞–Ω–∏–µ 100 —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
            dates = pd.date_range('2023-12-01', '2023-12-31', freq='1H')
            np.random.seed(42)
            
            base_price = 1.0850 if symbol == 'EURUSD' else 1.2650
            price = base_price + np.cumsum(np.random.randn(len(dates)) * 0.001)
            
            df = pd.DataFrame({
                'open': price * (1 + np.random.randn(len(dates)) * 0.0005),
                'high': price * (1 + abs(np.random.randn(len(dates)) * 0.001)),
                'low': price * (1 - abs(np.random.randn(len(dates)) * 0.001)),
                'close': price,
                'volume': np.random.randint(1000, 10000, len(dates))
            }, index=dates)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            model = manager.create_model(symbol, timeframe)
            prediction = model.predict(df)
            
            if 'error' not in prediction:
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                ensemble_pred = prediction.get('ensemble_prediction', [])
                if len(ensemble_pred) > 0:
                    direction = ['HOLD', 'BUY', 'SELL'][np.argmax(ensemble_pred[-1])]
                    confidence = prediction.get('confidence', 0.5)
                    current_price = df['close'].iloc[-1]
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                    simulator.execute_trade(symbol, direction, current_price, confidence)
                    
                    print(f"   {symbol} {timeframe}: {direction} @ {current_price:.5f} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.4f})")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏
    stats = simulator.get_statistics()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
    print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {stats['total_trades']}")
    print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {stats['profitable_trades']}")
    print(f"   –í–∏–Ω—Ä–µ–π—Ç: {stats['win_rate']:.2f}%")
    print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {stats['total_profit']:.2f}")
    print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {stats['final_capital']:.2f}")
    print(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['return_percent']:.2f}%")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    async def main():
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ —Å–∏—Å—Ç–µ–º—ã '–û–¥–Ω–∞ –ø–∞—Ä–∞ - –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å'")
        
        # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        manager = await example_single_pair_training()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        await example_prediction_workflow(manager)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏
        await example_model_management(manager)
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await example_performance_comparison(manager)
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        await example_automated_trading_simulation(manager)
        
        print("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üìö –°–∏—Å—Ç–µ–º–∞ '–û–¥–Ω–∞ –ø–∞—Ä–∞ - –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å' –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    
    asyncio.run(main())